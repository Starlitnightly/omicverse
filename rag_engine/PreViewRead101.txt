This rag_engine is for preview only. It is not for production use.

First time users should read the following instructions carefully.

### Tutorial for RAG Engine Preview

This tutorial will guide you through the setup and usage of the RAG Engine Preview. Follow the steps below to get started.

#### Prerequisites

Ensure you have the following installed:
- Python 3.12
- Required Python packages: `langchain`, `langchain-community`, `sentence-transformers`, `numpy`, `faiss-cpu`, `chromadb`, `requests`, `psutil`, `prometheus_client`, `tenacity`, `streamlit`

#### Step 1: Install Dependencies

Install the necessary dependencies using pip:

```bash
pip install langchain langchain-community sentence-transformers numpy faiss-cpu chromadb requests psutil prometheus_client tenacity streamlit
```

#### Step 2: Dive into the rag_engine_preview

```bash
cd rag_engine
```

#### Step 3: Double-Check the Required Files

Create the following files in your project directory:

1. `rag_system.py`
2. `app.py`
3. `PreViewRead101.txt`
4. `ovrawjson folder`
5. `__init__.py`
6. `config.json`
7. `requirements.txt`

Ensure the files are correctly named and placed in the project directory.

#### Step 4: test the RAG System

Run the app.py and rag_system.py to test the RAG System.

#### Step 5: Run the Streamlit Application

Navigate to the project directory and run the Streamlit application:

```bash
streamlit run app.py
```

#### Step 6: Interact with the Application

Attention: Your first time to initialize the RAG Engine Preview, you need to wait for a while to load the model. (Up to 30 minutes)

Open the provided URL in your browser to interact with the RAG Engine Preview. You can enter queries and view the results processed by the RAG system.

#### Step 7: Review the Logs

Logs are generated in the `logs` directory. Review these logs to monitor the system's performance and debug any issues.

#### Additional Information

- **Configuration**: Modify the configuration settings in the Streamlit sidebar to customize the models and rate limits.
- **Health Checks**: Use the system health and status indicators in the sidebar to ensure the system is running correctly.
- **Query History**: View the history of queries processed by the system in the sidebar.

This completes the setup and usage tutorial for the RAG Engine Preview.
For any issues or feedback, please refer to the provided documentation or contact the support team.

In the Next Update, we will provide more features and improvements to enhance the user experience.
1. The Local Reasoning Engine has 90% ability to understand the context of the query compared to the OpenAI o1 model in the Bioinformatics domain.
2. The online model API supports the user to query the data from the SOTA model.
3. The Local elastic search engine is able to search the data from the local database.
4. The Local elastic knowledge base is able to update and delete the data from the local database.

Love from 3910❤️