[
  {
    "action": "Import necessary libraries: omicverse, os, scanpy, numpy, pandas, and torch. Set plotting parameters using `ov.plot_set()`.",
    "code": "import omicverse as ov\nimport os\n\nimport scanpy as sc\nimport numpy as np\nimport pandas as pd\nimport torch\nov.plot_set()"
  },
  {
    "action": "Import specific functions and classes from the `omicverse.externel.scSLAT` module. These include functions for data loading, spatial network calculation, SLAT execution, scanpy workflow, spatial matching, visualization tools (e.g., 3D matching, histograms, Sankey diagrams), and region statistics.",
    "code": "#import scSLAT\nfrom omicverse.externel.scSLAT.model import load_anndatas, Cal_Spatial_Net, run_SLAT, scanpy_workflow, spatial_match\nfrom omicverse.externel.scSLAT.viz import match_3D_multi, hist, Sankey, match_3D_celltype, Sankey,Sankey_multi,build_3D\nfrom omicverse.externel.scSLAT.metrics import region_statistics"
  },
  {
    "action": "Load two AnnData objects from H5AD files. `adata1` represents the E11.5 mouse embryo dataset, and `adata2` represents the E12.5 mouse embryo dataset.",
    "code": "adata1 = sc.read_h5ad('data/E115_Stereo.h5ad')\nadata2 = sc.read_h5ad('data/E125_Stereo.h5ad')"
  },
  {
    "action": "Add a 'week' column to the observation metadata (`.obs`) of each AnnData object, indicating the developmental stage (E11.5 or E12.5).",
    "code": "adata1.obs['week']='E11.5'\nadata2.obs['week']='E12.5'"
  },
  {
    "action": "Generate spatial plots for `adata1` and `adata2`, coloring the spots by the 'annotation' variable and setting the spot size to 3.",
    "code": "sc.pl.spatial(adata1, color='annotation', spot_size=3)\nsc.pl.spatial(adata2, color='annotation', spot_size=3)"
  },
  {
    "action": "Calculate spatial networks for `adata1` and `adata2` using the KNN model with a k_cutoff of 20. Load the AnnData objects into a format suitable for SLAT, using 'DPCA' as the feature representation and ensuring the order of features is not checked.",
    "code": "Cal_Spatial_Net(adata1, k_cutoff=20, model='KNN')\nCal_Spatial_Net(adata2, k_cutoff=20, model='KNN')\nedges, features = load_anndatas([adata1, adata2], feature='DPCA', check_order=False)"
  },
  {
    "action": "Run the SLAT algorithm with the specified features and edges. The `LGCN_layer` parameter is set to 5. The function returns embeddings for each dataset (`embd0`, `embd1`) and the computation time.",
    "code": "embd0, embd1, time = run_SLAT(features, edges, LGCN_layer=5)"
  },
  {
    "action": "Perform spatial matching between the embeddings `embd0` and `embd1`. The `reorder` parameter is set to False, and the original AnnData objects are provided. The function returns the best match indices, the index array, and the distances between matched points.",
    "code": "best, index, distance = spatial_match([embd0, embd1], reorder=False, adatas=[adata1,adata2])"
  },
  {
    "action": "Create a matching array from the best match indices. Calculate region statistics for the best matches, starting from 0.5 with 10 intervals.",
    "code": "matching = np.array([range(index.shape[0]), best])\nbest_match = distance[:,0]\nregion_statistics(best_match, start=0.5, number_of_interval=10)"
  },
  {
    "action": "Import the `matplotlib.pyplot` module. Build a 3D model from `adata1` and `adata2` using the provided matching list. The model is subsampled to 300 points. The `draw_3D` function visualizes the model with specified parameters.",
    "code": "import matplotlib.pyplot as plt\nmatching_list=[matching]\nmodel = build_3D([adata1,adata2], matching_list,subsample_size=300, )\nax=model.draw_3D(hide_axis=True, line_color='#c2c2c2', height=1, size=[6,6], line_width=1)"
  },
  {
    "action": "Add a 'low_quality_index' column to `adata2.obs`, representing the quality of the alignment. Convert the column to float type.",
    "code": "adata2.obs['low_quality_index']= best_match\nadata2.obs['low_quality_index'] = adata2.obs['low_quality_index'].astype(float)"
  },
  {
    "action": "Display the spatial coordinates stored in `adata2.obsm['spatial']`.",
    "code": "adata2.obsm['spatial']"
  },
  {
    "action": "Generate a spatial plot for `adata2`, coloring the spots by the 'low_quality_index' variable, setting the spot size to 3, and adding the title 'Quality'.",
    "code": "sc.pl.spatial(adata2, color='low_quality_index', spot_size=3, title='Quality')"
  },
  {
    "action": "Generate a Sankey diagram to visualize the correspondence between cell types in `adata1` and `adata2`. The diagram is customized with various parameters, including node and link opacity, layout, font size, and color. The `return_fig` parameter is set to True to return the figure object.",
    "code": "fig=Sankey_multi(adata_li=[adata1,adata2],\n             prefix_li=['E11.5','E12.5'],\n             matching_li=[matching],\n                clusters='annotation',filter_num=10,\n             node_opacity = 0.8,\n             link_opacity = 0.2,\n                layout=[800,500],\n           font_size=12,\n           font_color='Black',\n           save_name=None,\n           format='png',\n           width=1200,\n           height=1000,\n           return_fig=True)\nfig.show()"
  },
  {
    "action": "Save the generated Sankey diagram as an HTML file named \"slat_sankey.html\".",
    "code": "fig.write_html(\"slat_sankey.html\")"
  },
  {
    "action": "Create DataFrames (`adata1_df`, `adata2_df`) from the AnnData objects, including spatial coordinates, cell type annotations, and corresponding colors. The colors are mapped from the `.uns` attribute of each AnnData object.",
    "code": "color_dict1=dict(zip(adata1.obs['annotation'].cat.categories,\n                    adata1.uns['annotation_colors'].tolist()))\nadata1_df = pd.DataFrame({'index':range(embd0.shape[0]),\n                          'x': adata1.obsm['spatial'][:,0],\n                          'y': adata1.obsm['spatial'][:,1],\n                          'celltype':adata1.obs['annotation'],\n                         'color':adata1.obs['annotation'].map(color_dict1)\n                         }\n                        )\ncolor_dict2=dict(zip(adata2.obs['annotation'].cat.categories,\n                    adata2.uns['annotation_colors'].tolist()))\nadata2_df = pd.DataFrame({'index':range(embd1.shape[0]),\n                          'x': adata2.obsm['spatial'][:,0],\n                          'y': adata2.obsm['spatial'][:,1],\n                          'celltype':adata2.obs['annotation'],\n                         'color':adata2.obs['annotation'].map(color_dict2)\n                         }\n                        )"
  },
  {
    "action": "Use the `match_3D_celltype` function to visualize the alignment of specific cell types ('Urogenital ridge', 'Kidney', and 'Ovary') between `adata1` and `adata2`. The visualization is customized with parameters for subsampling, highlighting, and coordinate scaling. The `draw_3D` function then displays the 3D alignment.",
    "code": "kidney_align = match_3D_celltype(adata1_df, adata2_df, matching, meta='celltype', \n                                 highlight_celltype = [['Urogenital ridge'],['Kidney','Ovary']],\n                                 subsample_size=10000, highlight_line = ['blue'], scale_coordinate = True )\nkidney_align.draw_3D(size= [6, 6], line_width =0.8, point_size=[0.6,0.6], hide_axis=True)"
  },
  {
    "action": "Define a function `cal_matching_cell` to find the cells in `target_adata` that are matched to a specific `query_cell` type in `query_adata` based on the provided `matching` information. The function returns a subset of `target_adata` containing the matched cells.",
    "code": "def cal_matching_cell(target_adata,query_adata,matching,query_cell,clusters='annotation',):\n    adata1_df = pd.DataFrame({'index':range(target_adata.shape[0]),\n                          'x': target_adata.obsm['spatial'][:,0],\n                          'y': target_adata.obsm['spatial'][:,1],\n                          'celltype':target_adata.obs[clusters]})\n    adata2_df = pd.DataFrame({'index':range(query_adata.shape[0]),\n                              'x': query_adata.obsm['spatial'][:,0],\n                              'y': query_adata.obsm['spatial'][:,1],\n                              'celltype':query_adata.obs[clusters]})\n    query_adata = target_adata[matching[1,adata2_df.loc[adata2_df.celltype==query_cell,'index'].values],:]\n    #adata2_df['target_celltype'] = adata1_df.iloc[matching[1,:],:]['celltype'].to_list()\n    #adata2_df['target_obs_names'] = adata1_df.iloc[matching[1,:],:].index.to_list()\n    \n    #query_obs=adata2_df.loc[adata2_df['celltype']==query_cell,'target_obs_names'].tolist()\n    return query_adata"
  },
  {
    "action": "Call the `cal_matching_cell` function to find the cells in `adata1` that match the 'Kidney' cells in `adata2`. The result is stored in `query_adata`.",
    "code": "query_adata=cal_matching_cell(target_adata=adata1,\n                              query_adata=adata2,\n                              matching=matching,\n                              query_cell='Kidney',clusters='annotation')\nquery_adata"
  },
  {
    "action": "Add a 'kidney_anno' column to `adata1.obs` and assign the 'annotation' values from `query_adata` to the corresponding cells in `adata1`.",
    "code": "adata1.obs['kidney_anno']=''\nadata1.obs.loc[query_adata.obs.index,'kidney_anno']=query_adata.obs['annotation']"
  },
  {
    "action": "Generate a spatial plot for `adata1`, coloring the spots by the 'kidney_anno' variable. A custom palette is used to highlight specific annotations.",
    "code": "sc.pl.spatial(adata1, color='kidney_anno', spot_size=3,\n             palette=['#F5F5F5','#ff7f0e', 'green',])"
  },
  {
    "action": "Concatenate `query_adata` and the 'Kidney' cells from `adata2` into a new AnnData object `kidney_lineage_ad`. Preprocess the combined data using `ov.pp.preprocess`, selecting the top 3000 highly variable genes and normalizing the data. Store the raw data in `.raw`, select highly variable genes, scale the data, perform PCA, compute a nearest neighbor graph, cluster the data using Leiden clustering, and compute UMAP embeddings.",
    "code": "kidney_lineage_ad=sc.concat([query_adata,adata2[adata2.obs['annotation']=='Kidney']],merge='same')\nkidney_lineage_ad=ov.pp.preprocess(kidney_lineage_ad,mode='shiftlog|pearson',n_HVGs=3000,target_sum=1e4)\nkidney_lineage_ad.raw = kidney_lineage_ad\nkidney_lineage_ad = kidney_lineage_ad[:, kidney_lineage_ad.var.highly_variable_features]\nov.pp.scale(kidney_lineage_ad)\nov.pp.pca(kidney_lineage_ad)\nov.pp.neighbors(kidney_lineage_ad,use_rep='scaled|original|X_pca',metric=\"cosine\")\nov.utils.cluster(kidney_lineage_ad,method='leiden',resolution=1)\nov.pp.umap(kidney_lineage_ad)"
  },
  {
    "action": "Generate UMAP plots for `kidney_lineage_ad`, coloring the cells by 'annotation', 'week', and 'leiden' clustering.",
    "code": "ov.pl.embedding(kidney_lineage_ad,basis='X_umap',\n               color=['annotation','week','leiden'],\n               frameon='small')"
  },
  {
    "action": "Generate a dot plot showing the expression of specific genes associated with nephron progenitors and metanephric/kidney development in the 'leiden' clusters of `kidney_lineage_ad`. The dot plot is customized with a color bar title and without a dendrogram.",
    "code": "sc.pl.dotplot(kidney_lineage_ad,{'nephron progenitors':['Wnt9b','Osr1','Nphs1','Lhx1','Pax2','Pax8'],\n                         'metanephric':['Eya1','Shisa3','Foxc1'], \n                         'kidney':['Wt1','Wnt4','Nr2f2','Dach1','Cd44']} ,\n              'leiden',dendrogram=False,colorbar_title='Expression')"
  },
  {
    "action": "Re-annotate the 'leiden' clusters in `kidney_lineage_ad.obs` based on their developmental stage and cluster identity. Clusters 4, 2, 3, 1, and 5 are labeled as 'Nephron progenitors (E11.5)' and 'Metanephron progenitors (E11.5)', respectively. Cluster 0 is labeled as 'Kidney (E12.5)'.",
    "code": "kidney_lineage_ad.obs['re_anno'] = 'Unknown'\nkidney_lineage_ad.obs.loc[kidney_lineage_ad.obs.leiden.isin(['4']),'re_anno'] = 'Nephron progenitors (E11.5)'\nkidney_lineage_ad.obs.loc[kidney_lineage_ad.obs.leiden.isin(['2','3','1','5']),'re_anno'] = 'Metanephron progenitors (E11.5)'\nkidney_lineage_ad.obs.loc[kidney_lineage_ad.obs.leiden=='0','re_anno'] = 'Kidney (E12.5)'"
  },
  {
    "action": "Generate UMAP plots for `kidney_lineage_ad`, coloring the cells by 'annotation' and the newly assigned 're_anno' labels.",
    "code": "kidney_lineage_ad.obs.leiden = list(kidney_lineage_ad.obs.leiden)\nov.pl.embedding(kidney_lineage_ad,basis='X_umap',\n               color=['annotation','re_anno'],\n               frameon='small')"
  },
  {
    "action": "Assign the 're_anno' labels from `kidney_lineage_ad` (specifically the E11.5 cells) to the corresponding cells in `adata1.obs['kidney_anno']`.",
    "code": "adata1.obs['kidney_anno']=''\nadata1.obs.loc[kidney_lineage_ad[kidney_lineage_ad.obs['week']=='E11.5'].obs.index,'kidney_anno']=kidney_lineage_ad[kidney_lineage_ad.obs['week']=='E11.5'].obs['re_anno']"
  },
  {
    "action": "Generate a spatial plot for `adata1`, coloring the spots by the 'kidney_anno' variable. A custom palette is used to highlight specific annotations, and the plot is displayed with a specified figure size.",
    "code": "import matplotlib.pyplot as plt\nfig, ax = plt.subplots(1, 1, figsize=(8, 8))\nsc.pl.spatial(adata1, color='kidney_anno', spot_size=1.5,\n             palette=['#F5F5F5','#ff7f0e', 'green',],show=False,ax=ax)"
  },
  {
    "action": "Perform differential expression analysis between E12.5 and E11.5 cells in `kidney_lineage_ad` using `ov.bulk.pyDEG`. The analysis uses the t-test method and sets thresholds for fold change, p-value, and -log10(p-value). A volcano plot is generated to visualize the results, highlighting the top 8 differentially expressed genes.",
    "code": "test_adata=kidney_lineage_ad\ndds=ov.bulk.pyDEG(test_adata.to_df(layer='lognorm').T)\ndds.drop_duplicates_index()\nprint('... drop_duplicates_index success')\ntreatment_groups=test_adata.obs[test_adata.obs['week']=='E12.5'].index.tolist()\ncontrol_groups=test_adata.obs[test_adata.obs['week']=='E11.5'].index.tolist()\nresult=dds.deg_analysis(treatment_groups,control_groups,method='ttest')\n# -1 means automatically calculates\ndds.foldchange_set(fc_threshold=-1,\n                   pval_threshold=0.05,\n                   logp_max=10)\n\n\ndds.plot_volcano(title='DEG Analysis',figsize=(4,4),\n                 plot_genes_num=8,plot_genes_fontsize=12,)"
  },
  {
    "action": "Extract the top 3 up-regulated and down-regulated genes from the differential expression analysis results based on q-value. Combine these genes into a single list `deg_gene`.",
    "code": "up_gene=dds.result.loc[dds.result['sig']=='up'].sort_values('qvalue')[:3].index.tolist()\ndown_gene=dds.result.loc[dds.result['sig']=='down'].sort_values('qvalue')[:3].index.tolist()\ndeg_gene=up_gene+down_gene"
  },
  {
    "action": "Generate a dot plot showing the expression of the differentially expressed genes (`deg_gene`) in the 're_anno' groups of `kidney_lineage_ad`.",
    "code": "sc.pl.dotplot(kidney_lineage_ad,deg_gene,\n             groupby='re_anno')"
  },
  {
    "action": "Calculate a dendrogram for `kidney_lineage_ad` based on the 're_anno' groups and the specified representation. Perform a t-test to rank genes based on their differential expression between the 're_anno' groups. Generate a dot plot showing the top 3 ranked genes for each group, using a specified color map and scaling method.",
    "code": "sc.tl.dendrogram(kidney_lineage_ad,'re_anno',use_rep='scaled|original|X_pca')\nsc.tl.rank_genes_groups(kidney_lineage_ad, 're_anno', use_rep='scaled|original|X_pca',\n                        method='t-test',use_raw=False,key_added='re_anno_ttest')\nsc.pl.rank_genes_groups_dotplot(kidney_lineage_ad,groupby='re_anno',\n                                cmap='RdBu_r',key='re_anno_ttest',\n                                standard_scale='var',n_genes=3)"
  }
]