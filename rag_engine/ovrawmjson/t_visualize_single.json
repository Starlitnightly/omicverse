[
  {
    "action": "Import necessary libraries: omicverse, scanpy. Set plotting parameters using `ov.plot_set()`.",
    "code": "import omicverse as ov\nimport scanpy as sc\n#import scvelo as scv\nov.plot_set()"
  },
  {
    "action": "Read single-cell RNA-seq data from a file named '10X43_1.h5ad' located in the 'data/DentateGyrus/' directory and store it in the `adata` variable.",
    "code": "adata = ov.read('data/DentateGyrus/10X43_1.h5ad')"
  },
  {
    "action": "Optimize color mapping for the 'clusters' variable in the AnnData object `adata` based on the 'X_umap' embedding using `ov.pl.optim_palette`.",
    "code": "optim_palette=ov.pl.optim_palette(adata,basis='X_umap',colors='clusters')"
  },
  {
    "action": "Create an embedding plot of the `adata` object, coloring cells by 'clusters' using the optimized palette, and display the plot with a title.",
    "code": "import matplotlib.pyplot as plt\nfig,ax=plt.subplots(figsize = (4,4))\nov.pl.embedding(adata,\n                basis='X_umap',\n               color='clusters',\n               frameon='small',\n               show=False,\n               palette=optim_palette,\n               ax=ax,)\nplt.title('Cell Type of DentateGyrus',fontsize=15)"
  },
  {
    "action": "Create an embedding plot of the `adata` object, coloring cells by 'age(days)' and display the plot.",
    "code": "ov.pl.embedding(adata,\n                basis='X_umap',\n               color='age(days)',\n               frameon='small',\n               show=False,)"
  },
  {
    "action": "Create a stacked histogram of cell proportions, grouped by 'age(days)' and colored by 'clusters', with a legend.",
    "code": "import matplotlib.pyplot as plt\nfig,ax=plt.subplots(figsize = (1,4))\nov.pl.cellproportion(adata=adata,celltype_clusters='clusters',\n                    groupby='age(days)',legend=True,ax=ax)"
  },
  {
    "action": "Create a stacked histogram of cell proportions for specific cell types ('nIPC', 'Granule immature', 'Granule mature'), grouped by 'clusters' and colored by 'age(days)', with a legend.",
    "code": "fig,ax=plt.subplots(figsize = (2,2))\nov.pl.cellproportion(adata=adata,celltype_clusters='age(days)',\n                    groupby='clusters',groupby_li=['nIPC','Granule immature','Granule mature'],\n                     legend=True,ax=ax)"
  },
  {
    "action": "Create a stacked area graph showing the changes in cell types ('nIPC', 'Granule immature', 'Granule mature') across different groups defined by 'clusters', colored by 'age(days)', with a legend.",
    "code": "fig,ax=plt.subplots(figsize = (2,2))\nov.pl.cellstackarea(adata=adata,celltype_clusters='age(days)',\n                    groupby='clusters',groupby_li=['nIPC','Granule immature','Granule mature'],\n                     legend=True,ax=ax)"
  },
  {
    "action": "Create an embedding plot with cell type proportions, using 'X_umap' as the basis and 'clusters' as the cell type key.",
    "code": "ov.pl.embedding_celltype(adata,figsize=(7,4),basis='X_umap',\n                            celltype_key='clusters',\n                            title='            Cell type',\n                            celltype_range=(1,10),\n                            embedding_range=(4,10),)"
  },
  {
    "action": "Create an embedding plot and highlight the 'Granule mature' cell type with a convex hull.",
    "code": "import matplotlib.pyplot as plt\nfig,ax=plt.subplots(figsize = (4,4))\n\nov.pl.embedding(adata,\n                basis='X_umap',\n                color=['clusters'],\n                frameon='small',\n                show=False,\n                ax=ax)\n\nov.pl.ConvexHull(adata,\n                basis='X_umap',\n                cluster_key='clusters',\n                hull_cluster='Granule mature',\n                ax=ax)"
  },
  {
    "action": "Create an embedding plot and highlight the 'Granule immature' and 'Granule mature' cell types with contours.",
    "code": "import matplotlib.pyplot as plt\nfig,ax=plt.subplots(figsize = (4,4))\n\nov.pl.embedding(adata,\n                basis='X_umap',\n                color=['clusters'],\n                frameon='small',\n                show=False,\n                ax=ax)\n\nov.pl.contour(ax=ax,adata=adata,groupby='clusters',clusters=['Granule immature','Granule mature'],\n       basis='X_umap',contour_threshold=0.1,colors='#000000',\n        linestyles='dashed',)"
  },
  {
    "action": "Create an embedding plot with adjusted legend to prevent masking, excluding the 'OL' cell type.",
    "code": "from matplotlib import patheffects\nimport matplotlib.pyplot as plt\nfig, ax = plt.subplots(figsize=(4,4))\n\nov.pl.embedding(adata,\n                  basis='X_umap',\n                  color=['clusters'],\n                   show=False, legend_loc=None, add_outline=False, \n                   frameon='small',legend_fontoutline=2,ax=ax\n                 )\n\nov.pl.embedding_adjust(\n    adata,\n    groupby='clusters',\n    exclude=(\"OL\",),  \n    basis='X_umap',\n    ax=ax,\n    adjust_kwargs=dict(arrowprops=dict(arrowstyle='-', color='black')),\n    text_kwargs=dict(fontsize=12 ,weight='bold',\n                     path_effects=[patheffects.withStroke(linewidth=2, foreground='w')] ),\n)"
  },
  {
    "action": "Create an embedding plot showing the density distribution of the 'Granule mature' cell type.",
    "code": "ov.pl.embedding_density(adata,\n                 basis='X_umap',\n                 groupby='clusters',\n                 target_clusters='Granule mature',\n                 frameon='small',\n                show=False,cmap='RdBu_r',alpha=0.8)"
  },
  {
    "action": "Calculate the AUCell score for the 'Sox' gene set and add it to the AnnData object.",
    "code": "ov.single.geneset_aucell(adata,\n                            geneset_name='Sox',\n                            geneset=['Sox17', 'Sox4', 'Sox7', 'Sox18', 'Sox5'])"
  },
  {
    "action": "Create an embedding plot colored by the expression of the 'Sox4' gene.",
    "code": "ov.pl.embedding(adata,\n                basis='X_umap',\n                color=['Sox4'],\n                frameon='small',\n                show=False,)"
  },
  {
    "action": "Create a violin plot of 'Sox4' expression grouped by 'clusters'.",
    "code": "ov.pl.violin(adata,keys='Sox4',groupby='clusters',figsize=(6,3))"
  },
  {
    "action": "Create a bar-dot plot of 'Sox_aucell' grouped by 'clusters' and add a p-value annotation.",
    "code": "fig, ax = plt.subplots(figsize=(6,2))\nov.pl.bardotplot(adata,groupby='clusters',color='Sox_aucell',figsize=(6,2),\n           ax=ax,\n          ylabel='Expression',\n           bar_kwargs={'alpha':0.5,'linewidth':2,'width':0.6,'capsize':4},\n           scatter_kwargs={'alpha':0.8,'s':10,'marker':'o'})\n\nov.pl.add_palue(ax,line_x1=3,line_x2=4,line_y=0.1,\n          text_y=0.02,\n          text='$p={}$'.format(round(0.001,3)),\n          fontsize=11,fontcolor='#000000',\n             horizontalalignment='center',)"
  },
  {
    "action": "Create a bar-dot plot of 'Sox17' expression grouped by 'clusters' and add a p-value annotation.",
    "code": "fig, ax = plt.subplots(figsize=(6,2))\nov.pl.bardotplot(adata,groupby='clusters',color='Sox17',figsize=(6,2),\n           ax=ax,\n          ylabel='Expression',xlabel='Cell Type',\n           bar_kwargs={'alpha':0.5,'linewidth':2,'width':0.6,'capsize':4},\n           scatter_kwargs={'alpha':0.8,'s':10,'marker':'o'})\n\nov.pl.add_palue(ax,line_x1=3,line_x2=4,line_y=2,\n          text_y=0.2,\n          text='$p={}$'.format(round(0.001,3)),\n          fontsize=11,fontcolor='#000000',\n             horizontalalignment='center',)"
  },
  {
    "action": "Create a box plot with jitter points for 'Sox_aucell' expression grouped by 'clusters', with Kruskal-Wallis test results and customized appearance.",
    "code": "import pandas as pd\nimport seaborn as sns\n#sns.set_style('white')\n\nov.pl.single_group_boxplot(adata,groupby='clusters',\n             color='Sox_aucell',\n             type_color_dict=dict(zip(pd.Categorical(adata.obs['clusters']).categories, adata.uns['clusters_colors'])),\n             x_ticks_plot=True,\n             figsize=(5,2),\n             kruskal_test=True,\n             ylabel='Sox_aucell',\n             legend_plot=False,\n             bbox_to_anchor=(1,1),\n             title='Expression',\n             scatter_kwargs={'alpha':0.8,'s':10,'marker':'o'},\n             point_number=15,\n             sort=False,\n             save=False,\n             )\nplt.grid(False)\nplt.xticks(rotation=90,fontsize=12)"
  },
  {
    "action": "Define a dictionary of marker genes for the 'Sox' cell type and create a complex heatmap of gene expression grouped by 'clusters'.",
    "code": "import pandas as pd\nmarker_genes_dict = {\n    'Sox':['Sox4', 'Sox7', 'Sox18', 'Sox5'],\n}\n\ncolor_dict = {'Sox':'#EFF3D8',}\n\ngene_color_dict = {}\ngene_color_dict_black = {}\nfor cell_type, genes in marker_genes_dict.items():\n    cell_type_color = color_dict.get(cell_type)\n    for gene in genes:\n        gene_color_dict[gene] = cell_type_color\n        gene_color_dict_black[gene] = '#000000'\n\ncm = ov.pl.complexheatmap(adata,\n                       groupby ='clusters',\n                       figsize =(5,2),\n                       layer = None,\n                       use_raw = False,\n                       standard_scale = 'var',\n                       col_color_bars = dict(zip(pd.Categorical(adata.obs['clusters']).categories, adata.uns['clusters_colors'])),\n                       col_color_labels = dict(zip(pd.Categorical(adata.obs['clusters']).categories, adata.uns['clusters_colors'])),\n                       left_color_bars = color_dict,\n                       left_color_labels = None,\n                       right_color_bars = color_dict,\n                       right_color_labels = gene_color_dict_black,\n                       marker_genes_dict = marker_genes_dict,\n                       cmap = 'coolwarm', #parula,jet\n                       legend_gap = 15,\n                       legend_hpad = 0,\n                       left_add_text = True,\n                       col_split_gap = 2,\n                       row_split_gap = 1,\n                       col_height = 6,\n                       left_height = 4,\n                       right_height = 6,\n                       col_split = None,\n                       row_cluster = False,\n                       col_cluster = False,\n                       value_name='Gene',\n                       xlabel = \"Expression of selected genes\",\n                       label = 'Gene Expression',\n                       save = True,\n                       show = False,\n                       legend = False,\n                       plot_legend = False,\n                      #save_pathway = \"complexheatmap.png\",\n                            )"
  },
  {
    "action": "Preprocess the AnnData object and define a dictionary of marker genes for different cell types.",
    "code": "adata=ov.pp.preprocess(adata,mode='shiftlog|pearson',n_HVGs=2000,)\n\nmarker_genes_dict = {'Granule immature': ['Sepw1', 'Camk2b', 'Cnih2'],\n 'Radial Glia-like': ['Dbi', 'Fabp7', 'Aldoc'],\n 'Granule mature': ['Malat1', 'Rasl10a', 'Ppp3ca'],\n 'Neuroblast': ['Igfbpl1', 'Tubb2b', 'Tubb5'],\n 'Microglia': ['Lgmn', 'C1qa', 'C1qb'],\n 'Cajal Retzius': ['Diablo', 'Ramp1', 'Stmn1'],\n 'OPC': ['Olig1', 'C1ql1', 'Pllp'],\n 'Cck-Tox': ['Tshz2', 'Cck', 'Nap1l5'],\n 'GABA': ['Gad2', 'Gad1', 'Snhg11'],\n 'Endothelial': ['Sparc', 'Myl12a', 'Itm2a'],\n 'Astrocytes': ['Apoe',  'Atp1a2'],\n 'OL': ['Plp1', 'Mog', 'Mag'],\n 'Mossy': ['Arhgdig', 'Camk4'],\n 'nIPC': ['Hmgn2', 'Ptma', 'H2afz']}"
  },
  {
    "action": "Create a marker gene heatmap using the defined marker genes dictionary and customize its appearance.",
    "code": "ov.pl.marker_heatmap(\n    adata,\n    marker_genes_dict,\n    groupby='clusters',\n    color_map=\"RdBu_r\",\n    use_raw=False,\n    standard_scale=\"var\",\n    expression_cutoff=0.0,\n    fontsize=12,\n    bbox_to_anchor=(7, -2),\n    figsize=(8.5,4),\n    spines=False,\n    show_rownames=False,\n    show_colnames=True,\n)"
  }
]