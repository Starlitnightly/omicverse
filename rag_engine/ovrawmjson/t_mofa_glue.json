[
  {
    "action": "Import the omicverse library and set plotting parameters using `ov.utils.ov_plot_set()`.",
    "code": "import omicverse as ov\nov.utils.ov_plot_set()"
  },
  {
    "action": "Load RNA and ATAC data from 'h5ad' files using `ov.utils.read()`.",
    "code": "rna=ov.utils.read(\"chen_rna-emb.h5ad\")\natac=ov.utils.read(\"chen_atac-emb.h5ad\")"
  },
  {
    "action": "Create a GLUE_pair object to pair cells between RNA and ATAC data based on the Pearson correlation coefficient of their feature vectors (X_glue).",
    "code": "pair_obj=ov.single.GLUE_pair(rna,atac)\npair_obj.correlation()"
  },
  {
    "action": "Find the top 20 highly correlated cells in the other omics layer for each cell, with a default minimum correlation threshold of 0.9. Save the results to a CSV file.",
    "code": "res_pair=pair_obj.find_neighbor_cell(depth=20)\nres_pair.to_csv('models/chen_pair_res.csv')"
  },
  {
    "action": "Filter the original RNA and ATAC datasets to keep only the paired cells identified in the previous step. Rename the index of the filtered datasets to match the paired cell indices.",
    "code": "rna1=rna[res_pair['omic_1']]\natac1=atac[res_pair['omic_2']]\nrna1.obs.index=res_pair.index\natac1.obs.index=res_pair.index\nrna1,atac1"
  },
  {
    "action": "Create a MuData object to store the paired RNA and ATAC data.",
    "code": "from mudata import MuData\n\nmdata = MuData({'rna': rna1, 'atac': atac1})\nmdata"
  },
  {
    "action": "Write the MuData object to a compressed 'h5mu' file.",
    "code": "mdata.write(\"chen_mu.h5mu\",compression='gzip')"
  },
  {
    "action": "Filter the RNA and ATAC data to keep only highly variable genes.",
    "code": "rna1=mdata['rna']\nrna1=rna1[:,rna1.var['highly_variable']==True]\natac1=mdata['atac']\natac1=atac1[:,atac1.var['highly_variable']==True]\nrna1.obs.index=res_pair.index\natac1.obs.index=res_pair.index"
  },
  {
    "action": "Randomly select 5000 cells from rna1 data",
    "code": "import random\nrandom_obs_index=random.sample(list(rna1.obs.index),5000)"
  },
  {
    "action": "Calculate the adjusted rand index (ARI) between the cell types of the randomly selected cells and all cells in the paired RNA and ATAC data.",
    "code": "from sklearn.metrics import adjusted_rand_score as ari\nari_random=ari(rna1[random_obs_index].obs['cell_type'], atac1[random_obs_index].obs['cell_type'])\nari_raw=ari(rna1.obs['cell_type'], atac1.obs['cell_type'])\nprint('raw ari:{}, random ari:{}'.format(ari_raw,ari_random))"
  },
  {
    "action": "Construct a MOFA model using the paired RNA and ATAC data.",
    "code": "test_mofa=ov.single.pyMOFA(omics=[rna1,atac1],\n                             omics_name=['RNA','ATAC'])"
  },
  {
    "action": "Preprocess the data for MOFA and run the MOFA algorithm, saving the results to an HDF5 file.",
    "code": "test_mofa.mofa_preprocess()\ntest_mofa.mofa_run(outfile='models/chen_rna_atac.hdf5')"
  },
  {
    "action": "Create a pyMOFAART object to analyze the MOFA results.",
    "code": "pymofa_obj=ov.single.pyMOFAART(model_path='models/chen_rna_atac.hdf5')"
  },
  {
    "action": "Extract the learned factors from the MOFA model and add them to the RNA AnnData object.",
    "code": "pymofa_obj.get_factors(rna1)\nrna1"
  },
  {
    "action": "Plot the variance explained (R^2) by each factor for each view.",
    "code": "pymofa_obj.plot_r2()"
  },
  {
    "action": "Get the R^2 values for each factor and view.",
    "code": "pymofa_obj.get_r2()"
  },
  {
    "action": "Plot the correlation between factors and a specified metadata column ('cell_type') in the RNA AnnData object.",
    "code": "pymofa_obj.plot_cor(rna1,'cell_type',figsize=(4,6))"
  },
  {
    "action": "Get the correlation values between factors and the specified metadata column.",
    "code": "pymofa_obj.get_cor(rna1,'cell_type')"
  },
  {
    "action": "Plot a scatter plot of two specified factors, colored by a specified metadata column and highlighting a specific cell type.",
    "code": "pymofa_obj.plot_factor(rna1,'cell_type','Ast',figsize=(3,3),\n                    factor1=1,factor2=3,)"
  },
  {
    "action": "Calculate and store the Minimum Description Length (MDE) embedding of the data using the 'X_glue' representation.",
    "code": "from scvi.model.utils import mde\nimport scanpy as sc\nsc.pp.neighbors(rna1, use_rep=\"X_glue\", metric=\"cosine\")\nrna1.obsm[\"X_mde\"] = mde(rna1.obsm[\"X_glue\"])"
  },
  {
    "action": "Plot the MDE embedding, colored by specified factors and cell type.",
    "code": "sc.pl.embedding(\n    rna1,\n    basis=\"X_mde\",\n    color=[\"factor1\",\"factor3\",\"cell_type\"],\n    frameon=False,\n    ncols=3,\n    #palette=ov.utils.pyomic_palette(),\n    show=False,\n    cmap='Greens',\n    vmin=0,\n)"
  },
  {
    "action": "Plot the weights of genes for two specified factors in a specified view.",
    "code": "pymofa_obj.plot_weight_gene_d1(view='RNA',factor1=1,factor2=3,)"
  },
  {
    "action": "Plot the weights of genes for a specified factor in a specified view, sorted in ascending or descending order.",
    "code": "pymofa_obj.plot_weights(view='RNA',factor=1,\n                        ascending=False)"
  },
  {
    "action": "Plot a heatmap of the top features for each factor in a specified view.",
    "code": "pymofa_obj.plot_top_feature_heatmap(view='RNA')"
  }
]