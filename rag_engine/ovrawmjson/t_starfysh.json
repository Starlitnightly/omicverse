[
  {
    "action": "Import necessary libraries: scanpy and omicverse. Set plotting parameters using `ov.plot_set()`.",
    "code": "import scanpy as sc\nimport omicverse as ov\nov.plot_set()"
  },
  {
    "action": "Import specific modules from the omicverse package related to Starfysh, including Archetypal Analysis (AA), utility functions (utils), plotting utilities (plot_utils), and post-analysis tools (post_analysis). Also, import the Starfysh model itself (_starfysh).",
    "code": "from omicverse.externel.starfysh import (AA, utils, plot_utils, post_analysis)\nfrom omicverse.externel.starfysh import _starfysh as sf_model"
  },
  {
    "action": "Define file paths for the data, sample ID, and signature gene set file name.",
    "code": "# Specify data paths\ndata_path = 'data/star_data'\nsample_id = 'CID44971_TNBC'\nsig_name = 'bc_signatures_version_1013.csv'"
  },
  {
    "action": "Load spatial transcriptomics data and signature gene sets using utility functions. The `load_adata` function reads the data, and `filter_gene_sig` filters the signature gene sets to include only genes present in the spatial transcriptomics data.",
    "code": "# Load expression counts and signature gene sets\nadata, adata_normed = utils.load_adata(data_folder=data_path,\n                                       sample_id=sample_id, # sample id\n                                       n_genes=2000  # number of highly variable genes to keep\n                                       )"
  },
  {
    "action": "Import pandas and os libraries. Read the signature gene sets from a CSV file into a pandas DataFrame. Filter the gene signatures to keep only those genes that are also present in the spatial transcriptomics data.",
    "code": "import pandas as pd\nimport os\ngene_sig = pd.read_csv(os.path.join(data_path, sig_name))\ngene_sig = utils.filter_gene_sig(gene_sig, adata.to_df())\ngene_sig.head()"
  },
  {
    "action": "Load spatial information and preprocess the histology image associated with the spatial transcriptomics data. This includes reading the image, extracting mapping information, and calculating scale factors.",
    "code": "# Load spatial information\nimg_metadata = utils.preprocess_img(data_path,\n                                    sample_id,\n                                    adata_index=adata.obs.index,\n                                    #hchannel=False\n                                    )\nimg, map_info, scalefactor = img_metadata['img'], img_metadata['map_info'], img_metadata['scalefactor']\numap_df = utils.get_umap(adata, display=True)"
  },
  {
    "action": "Import the matplotlib.pyplot module for plotting. Create a new figure and display the histology image using `imshow`.",
    "code": "import matplotlib.pyplot as plt\nplt.figure(figsize=(6, 6), dpi=80)\nplt.imshow(img)"
  },
  {
    "action": "Display the first few rows of the `map_info` DataFrame, which contains spatial mapping information for the spots in the spatial transcriptomics data.",
    "code": "map_info.head()"
  },
  {
    "action": "Prepare arguments for the Visium data processing, including raw and normalized count data, filtered signature genes, image metadata, number of anchor spots, window size for spatial smoothing, and sample ID.",
    "code": "# Parameters for training\nvisium_args = utils.VisiumArguments(adata,\n                                    adata_normed,\n                                    gene_sig,\n                                    img_metadata,\n                                    n_anchors=60,\n                                    window_size=3,\n                                    sample_id=sample_id\n                                   )\n\nadata, adata_normed = visium_args.get_adata()\nanchors_df = visium_args.get_anchors()"
  },
  {
    "action": "Add new columns to the `adata.obs` DataFrame for log-transformed library size and windowed log-transformed library size, which are calculated during the Visium data processing.",
    "code": "adata.obs['log library size']=visium_args.log_lib\nadata.obs['windowed log library size']=visium_args.win_loglib"
  },
  {
    "action": "Use scanpy's `sc.pl.spatial` function to visualize the log library size on the spatial map. The plot is colored using the 'magma' colormap, and the size of the spots is adjusted for better visualization.",
    "code": "sc.pl.spatial(adata, cmap='magma',\n                  # show first 8 cell types\n                  color='log library size',\n                  ncols=4, size=1.3,\n                  img_key='hires',\n                  #palette=Layer_color\n                  # limit color scale at 99.2% quantile of cell abundance\n                  #vmin=0, vmax='p99.2'\n                 )"
  },
  {
    "action": "Visualize the windowed log library size on the spatial map using `sc.pl.spatial`. This plot shows the spatially smoothed library size, which can help in understanding the spatial distribution of sequencing depth.",
    "code": "sc.pl.spatial(adata, cmap='magma',\n                  # show first 8 cell types\n                  color='windowed log library size',\n                  ncols=4, size=1.3,\n                  img_key='hires',\n                  #palette=Layer_color\n                  # limit color scale at 99.2% quantile of cell abundance\n                  #vmin=0, vmax='p99.2'\n                 )"
  },
  {
    "action": "Visualize the raw gene expression of the 'IL7R' gene on the spatial map using `sc.pl.spatial`. This plot helps in understanding the spatial expression pattern of a specific gene.",
    "code": "sc.pl.spatial(adata, cmap='magma',\n                  # show first 8 cell types\n                  color='IL7R',\n                  ncols=4, size=1.3,\n                  img_key='hires',\n                  #palette=Layer_color\n                  # limit color scale at 99.2% quantile of cell abundance\n                  #vmin=0, vmax='p99.2'\n                 )"
  },
  {
    "action": "Plot the anchor spots identified during the preprocessing step. Anchor spots are locations in the tissue that are representative of specific cell types. The plot shows the UMAP representation of the data with anchor spots highlighted.",
    "code": "plot_utils.plot_anchor_spots(umap_df,\n                             visium_args.pure_spots,\n                             visium_args.sig_mean,\n                             bbox_x=2\n                            )"
  },
  {
    "action": "Initialize the Archetypal Analysis (AA) model using the normalized spatial transcriptomics data. Compute archetypes, which represent the 'purest' cell types in the data. Find archetypal spots and marker genes associated with each archetype. Assign archetypes to the closest anchor spots and identify distant archetypes that may represent novel cell types or states.",
    "code": "aa_model = AA.ArchetypalAnalysis(adata_orig=adata_normed)\narchetype, arche_dict, major_idx, evs = aa_model.compute_archetypes(cn=40)\n# (1). Find archetypal spots & archetypal clusters\narche_df = aa_model.find_archetypal_spots(major=True)\n\n# (2). Find marker genes associated with each archetypal cluster\nmarkers_df = aa_model.find_markers(n_markers=30, display=False)\n\n# (3). Map archetypes to closest anchors (1-1 per cell type)\nmap_df, map_dict = aa_model.assign_archetypes(anchors_df)\n\n# (4). Optional: Find the most distant archetypes that are not assigned to any annotated cell types\ndistant_arches = aa_model.find_distant_archetypes(anchors_df, n=3)"
  },
  {
    "action": "Plot the explained variances (evs) from the Archetypal Analysis to help determine the optimal number of archetypes. The plot shows the cumulative explained variance as a function of the number of archetypes.",
    "code": "plot_utils.plot_evs(evs, kmin=aa_model.kmin)"
  },
  {
    "action": "Visualize the archetypes in a 2D UMAP representation. The plot shows the distribution of archetypes and their relationships to each other.",
    "code": "aa_model.plot_archetypes(do_3d=False, major=True, disp_cluster=False)"
  },
  {
    "action": "Visualize the mapping between archetypes and cell types. This plot helps in understanding how the identified archetypes correspond to known cell types based on the anchor spots.",
    "code": "aa_model.plot_mapping(map_df)"
  },
  {
    "action": "Refine the anchor spots by appending marker genes from the best-aligned archetypes. This step updates the signature genes and anchor spots based on the Archetypal Analysis results.",
    "code": "visium_args = utils.refine_anchors(\n    visium_args,\n    aa_model,\n    #thld=0.7,  # alignment threshold\n    n_genes=5,\n    #n_iters=1\n)\n\n# Get updated adata & signatures\nadata, adata_normed = visium_args.get_adata()\ngene_sig = visium_args.gene_sig\ncell_types = gene_sig.columns"
  },
  {
    "action": "Import the torch library. Set the number of random restarts for model training, the number of epochs, and the patience for early stopping. Define the device for model training (CPU or GPU).",
    "code": "import torch\nn_repeats = 3\nepochs = 200\npatience = 50\ndevice = torch.device('cuda' if torch.cuda.is_available() else 'cpu')"
  },
  {
    "action": "Train the Starfysh model without histology integration. The `run_starfysh` function performs the model training with the specified parameters and returns the trained model and the training loss.",
    "code": "# Run models\nmodel, loss = utils.run_starfysh(visium_args,\n                                 n_repeats=n_repeats,\n                                 epochs=epochs,\n                                 #patience=patience,\n                                 device=device\n                                )"
  },
  {
    "action": "Evaluate the trained Starfysh model and obtain inference and generative outputs. The `model_eval` function processes the model outputs and returns the inferred cell type proportions and other relevant parameters.",
    "code": "adata, adata_normed = visium_args.get_adata()\ninference_outputs, generative_outputs,adata_ = sf_model.model_eval(model,\n                                                            adata,\n                                                            visium_args,\n                                                            poe=False,\n                                                            device=device)"
  },
  {
    "action": "Import numpy. Select a random cell type index and use the `gene_mean_vs_inferred_prop` function to compare the signature gene mean expression with the inferred cell type proportion for the selected cell type.",
    "code": "import numpy as np\nn_cell_types = gene_sig.shape[1]\nidx = np.random.randint(0, n_cell_types)\npost_analysis.gene_mean_vs_inferred_prop(inference_outputs,\n                                         visium_args,\n                                         idx=idx,\n                                         figsize=(4,4)\n                                        )"
  },
  {
    "action": "Use the `pl_spatial_inf_feature` function to visualize an inferred feature (e.g., 'ql_m') on the spatial map. The plot is colored using the 'Blues' colormap.",
    "code": "plot_utils.pl_spatial_inf_feature(adata_, feature='ql_m', cmap='Blues')"
  },
  {
    "action": "Define a function `cell2proportion` to extract cell type proportion data from the `adata_` object and create a new AnnData object (`adata_plot`) for plotting.",
    "code": "def cell2proportion(adata):\n    adata_plot=sc.AnnData(adata.X)\n    adata_plot.obs=utils.extract_feature(adata_, 'qc_m').obs.copy()\n    adata_plot.var=adata.var.copy()\n    adata_plot.obsm=adata.obsm.copy()\n    adata_plot.obsp=adata.obsp.copy()\n    adata_plot.uns=adata.uns.copy()\n    return adata_plot\nadata_plot=cell2proportion(adata_)"
  },
  {
    "action": "Display a summary of the `adata_plot` object, which contains the cell type proportion data.",
    "code": "adata_plot"
  },
  {
    "action": "Visualize the inferred cell type proportions for specific cell types ('Basal', 'LumA', 'LumB') on the spatial map using `sc.pl.spatial`. The plot is colored using the 'Spectral_r' colormap, and the color scale is limited to the 90th percentile.",
    "code": "sc.pl.spatial(adata_plot, cmap='Spectral_r',\n                  # show first 8 cell types\n                  color=['Basal','LumA','LumB'],\n                  ncols=4, size=1.3,\n                  img_key='hires',\n                  vmin=0, vmax='p90'\n                 )"
  },
  {
    "action": "Use `ov.pl.embedding` to visualize the cell type proportions in a 2D UMAP representation. The plot shows the distribution of cell types ('Basal', 'LumA', 'MBC', 'Normal epithelial') and their relationships to each other.",
    "code": "ov.pl.embedding(adata_plot,\n               basis='z_umap',\n                color=['Basal', 'LumA', 'MBC', 'Normal epithelial'],\n               frameon='small',\n                vmin=0, vmax='p90',\n                cmap='Spectral_r',\n               )"
  },
  {
    "action": "Calculate the predicted expression of specific genes in each cell type using the `model_ct_exp` function. This function processes the model outputs and returns the predicted gene expression values.",
    "code": "pred_exprs = sf_model.model_ct_exp(model,\n                                   adata,\n                                   visium_args,\n                                   device=device)"
  },
  {
    "action": "Select a specific gene ('IL7R') and cell type ('Tem'). Add a new layer to the `adata_` object with the predicted expression values for the selected gene in the selected cell type. Visualize the predicted expression on the spatial map using `sc.pl.spatial`.",
    "code": "gene='IL7R'\ngene_celltype='Tem'\nadata_.layers[f'infer_{gene_celltype}']=pred_exprs[gene_celltype]\n\nsc.pl.spatial(adata_, cmap='Spectral_r',\n                  # show first 8 cell types\n                  color=gene,\n                  title=f'{gene} (Predicted expression)\\n{gene_celltype}',\n                  layer=f'infer_{gene_celltype}',\n                  ncols=4, size=1.3,\n                  img_key='hires',\n                  #vmin=0, vmax='p90'\n                 )"
  },
  {
    "action": "Specify the output directory for saving the model and inferred parameters. Create the directory if it doesn't exist. Save the trained Starfysh model's state dictionary to a .pt file. Save the `adata` object with inferred parameters to a .h5ad file.",
    "code": "# Specify output directory\noutdir = './results/'\nif not os.path.exists(outdir):\n    os.mkdir(outdir)\n\n# save the model\ntorch.save(model.state_dict(), os.path.join(outdir, 'starfysh_model.pt'))\n\n# save `adata` object with inferred parameters\nadata.write(os.path.join(outdir, 'st.h5ad'))"
  }
]