[
  {
    "action": "Import necessary libraries: omicverse, scanpy, infercnvpy, and matplotlib. Set plotting parameters and verbosity level.",
    "code": "import omicverse as ov\nimport scanpy as sc\nimport infercnvpy as cnv\nimport matplotlib.pyplot as plt\nimport os\n\nsc.settings.verbosity = 3             # verbosity: errors (0), warnings (1), info (2), hints (3)\nsc.settings.set_figure_params(dpi=80, facecolor='white')"
  },
  {
    "action": "Load the maynard2020_3k dataset using infercnvpy's datasets module.",
    "code": "adata = cnv.datasets.maynard2020_3k()"
  },
  {
    "action": "Annotate gene coordinates using a GTF file. This step adds chromosomal location information to the AnnData object.",
    "code": "ov.utils.get_gene_annotation(\n    adata, gtf=\"gencode.v43.basic.annotation.gtf.gz\",\n    gtf_by=\"gene_name\"\n)"
  },
  {
    "action": "Filter out genes with missing chromosome information and add chromosome, start, end, and ensg information to the var attribute of the AnnData object.",
    "code": "adata=adata[:,~adata.var['chrom'].isnull()]\nadata.var['chromosome']=adata.var['chrom']\nadata.var['start']=adata.var['chromStart']\nadata.var['end']=adata.var['chromEnd']\nadata.var['ensg']=adata.var['gene_id']\nadata.var.loc[:, [\"ensg\", \"chromosome\", \"start\", \"end\"]].head()"
  },
  {
    "action": "Display the structure and content of the AnnData object, showing the number of cells, genes, and other associated data.",
    "code": "adata"
  },
  {
    "action": "Infer copy number variations (CNVs) using infercnvpy. This step identifies potential tumor cells based on CNV profiles.",
    "code": "# We provide all immune cell types as \"normal cells\".\ncnv.tl.infercnv(\n    adata,\n    reference_key=\"cell_type\",\n    reference_cat=[\n        \"B cell\",\n        \"Macrophage\",\n        \"Mast cell\",\n        \"Monocyte\",\n        \"NK cell\",\n        \"Plasma cell\",\n        \"T cell CD4\",\n        \"T cell CD8\",\n        \"T cell regulatory\",\n        \"mDC\",\n        \"pDC\",\n    ],\n    window_size=250,\n)\ncnv.tl.pca(adata)\ncnv.pp.neighbors(adata)\ncnv.tl.leiden(adata)\ncnv.tl.umap(adata)\ncnv.tl.cnv_score(adata)"
  },
  {
    "action": "Visualize the CNV score on a UMAP plot. This helps in identifying cells with high CNV scores, which are likely tumor cells.",
    "code": "sc.pl.umap(adata, color=\"cnv_score\", show=False)"
  },
  {
    "action": "Annotate cells as 'normal' or 'tumor' based on their CNV score. A threshold of 0.03 is used to classify cells as tumor.",
    "code": "adata.obs[\"cnv_status\"] = \"normal\"\nadata.obs.loc[\n    adata.obs[\"cnv_score\"]>0.03, \"cnv_status\"\n] = \"tumor\""
  },
  {
    "action": "Visualize the CNV status ('normal' or 'tumor') on a UMAP plot.",
    "code": "sc.pl.umap(adata, color=\"cnv_status\", show=False)"
  },
  {
    "action": "Subset the AnnData object to include only tumor cells for further analysis.",
    "code": "tumor=adata[adata.obs['cnv_status']=='tumor']\ntumor.X.max()"
  },
  {
    "action": "Preprocess the tumor AnnData object. This includes filtering cells and genes, identifying mitochondrial genes, calculating QC metrics, and identifying highly variable genes.",
    "code": "adata=tumor\nprint('Preprocessing...')\nsc.pp.filter_cells(adata, min_genes=200)\nsc.pp.filter_genes(adata, min_cells=3)\nadata.var['mt'] = adata.var_names.str.startswith('MT-')\nsc.pp.calculate_qc_metrics(adata, qc_vars=['mt'], percent_top=None, log1p=False, inplace=True)\nif not (adata.obs.pct_counts_mt == 0).all():\n    adata = adata[adata.obs.pct_counts_mt < 30, :]\n\nadata.raw = adata.copy()\n\nsc.pp.highly_variable_genes(adata)\nadata = adata[:, adata.var.highly_variable]\nsc.pp.scale(adata)\nsc.tl.pca(adata, svd_solver='arpack')"
  },
  {
    "action": "Perform dimensionality reduction using PCA and UMAP, and compute nearest neighbors for clustering.",
    "code": "sc.pp.neighbors(adata, n_pcs=20)\nsc.tl.umap(adata)"
  },
  {
    "action": "Download necessary data for drug response prediction, including the GDSC drug database and CaDRReS model.",
    "code": "ov.utils.download_GDSC_data()\nov.utils.download_CaDRReS_model()"
  },
  {
    "action": "Apply single-cell data analysis to perform sub-clustering on the tumor clusters at an automatically determined resolution.",
    "code": "adata, res,plot_df = ov.single.autoResolution(adata,cpus=4)"
  },
  {
    "action": "Save the AnnData object to an H5AD file.",
    "code": "results_file = os.path.join('./', 'scanpyobj.h5ad')\nadata.write(results_file)"
  },
  {
    "action": "Reload the AnnData object from the H5AD file.",
    "code": "results_file = os.path.join('./', 'scanpyobj.h5ad')\nadata=sc.read(results_file)"
  },
  {
    "action": "Clone the CaDRReS-Sc repository from GitHub. This repository contains the code for drug response prediction.",
    "code": "get_ipython().system('git clone https://github.com/CSB5/CaDRReS-Sc')"
  },
  {
    "action": "Initialize and run the drug response prediction using the `ov.single.Drug_Response` function. This step predicts the IC50 values for each cell cluster.",
    "code": "import ov\njob=ov.single.Drug_Response(adata,scriptpath='CaDRReS-Sc',\n                                modelpath='models/',\n                                output='result')"
  }
]