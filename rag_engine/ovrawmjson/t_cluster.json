[
  {
    "action": "Import necessary libraries: omicverse, scanpy, and scvelo. Set plotting parameters using `ov.plot_set()`.",
    "code": "import omicverse as ov\nimport scanpy as sc\nimport scvelo as scv\nov.plot_set()"
  },
  {
    "action": "Import the scvelo library and load the dentategyrus dataset using `scv.datasets.dentategyrus()`. The dataset is stored in the `adata` variable.",
    "code": "import scvelo as scv\nadata=scv.datasets.dentategyrus()\nadata"
  },
  {
    "action": "Preprocess the `adata` object using `ov.pp.preprocess()`. The preprocessing steps include shifting and logging the data, applying Pearson residuals, and selecting the top 3000 highly variable genes. The preprocessed data is stored back in `adata`. The raw data is saved in `adata.raw`, and only the highly variable genes are kept. Finally, the data is scaled and PCA is performed using `ov.pp.scale()` and `ov.pp.pca()`.",
    "code": "adata=ov.pp.preprocess(adata,mode='shiftlog|pearson',n_HVGs=3000,)\nadata.raw = adata\nadata = adata[:, adata.var.highly_variable_features]\nov.pp.scale(adata)\nov.pp.pca(adata,layer='scaled',n_pcs=50)"
  },
  {
    "action": "Plot the variance ratio explained by each principal component using `ov.utils.plot_pca_variance_ratio()`.",
    "code": "ov.utils.plot_pca_variance_ratio(adata)"
  },
  {
    "action": "Compute the k-nearest neighbor graph using `sc.pp.neighbors()`. The number of neighbors is set to 15, the number of principal components is set to 50, and the representation used is 'scaled|original|X_pca'. Then, perform Leiden clustering using `ov.utils.cluster()` with `method='leiden'` and `resolution=1`.",
    "code": "sc.pp.neighbors(adata, n_neighbors=15, n_pcs=50,\n               use_rep='scaled|original|X_pca')\nov.utils.cluster(adata,method='leiden',resolution=1)"
  },
  {
    "action": "Generate UMAP embeddings and visualize the clusters and Leiden clustering results using `ov.utils.embedding()`. The `basis` is set to 'X_umap', `color` is set to ['clusters','leiden'], `frameon` is set to 'small', and `wspace` is set to 0.5.",
    "code": "ov.utils.embedding(adata,basis='X_umap',\n                   color=['clusters','leiden'],\n                   frameon='small',wspace=0.5)"
  },
  {
    "action": "Compute the k-nearest neighbor graph using `sc.pp.neighbors()`. The number of neighbors is set to 15, the number of principal components is set to 50, and the representation used is 'scaled|original|X_pca'. Then, perform Louvain clustering using `ov.utils.cluster()` with `method='louvain'` and `resolution=1`.",
    "code": "sc.pp.neighbors(adata, n_neighbors=15, n_pcs=50,\n               use_rep='scaled|original|X_pca')\nov.utils.cluster(adata,method='louvain',resolution=1)"
  },
  {
    "action": "Generate UMAP embeddings and visualize the clusters and Louvain clustering results using `ov.utils.embedding()`. The `basis` is set to 'X_umap', `color` is set to ['clusters','louvain'], `frameon` is set to 'small', and `wspace` is set to 0.5.",
    "code": "ov.utils.embedding(adata,basis='X_umap',\n                   color=['clusters','louvain'],\n                   frameon='small',wspace=0.5)"
  },
  {
    "action": "Perform Gaussian Mixture Model (GMM) clustering using `ov.utils.cluster()`. The representation used is 'scaled|original|X_pca', `method` is set to 'GMM', `n_components` is set to 21, `covariance_type` is set to 'full', `tol` is set to 1e-9, and `max_iter` is set to 1000.",
    "code": "ov.utils.cluster(adata,use_rep='scaled|original|X_pca',\n                 method='GMM',n_components=21,\n                 covariance_type='full',tol=1e-9, max_iter=1000, )"
  },
  {
    "action": "Generate UMAP embeddings and visualize the clusters and GMM clustering results using `ov.utils.embedding()`. The `basis` is set to 'X_umap', `color` is set to ['clusters','gmm_cluster'], `frameon` is set to 'small', and `wspace` is set to 0.5.",
    "code": "ov.utils.embedding(adata,basis='X_umap',\n                   color=['clusters','gmm_cluster'],\n                   frameon='small',wspace=0.5)"
  },
  {
    "action": "Initialize the Latent Dirichlet Allocation (LDA) model using `ov.utils.LDA_topic()`. The `feature_type` is set to 'expression', `highly_variable_key` is set to 'highly_variable_features', `layers` is set to 'counts', `batch_key` is set to None, and `learning_rate` is set to 1e-3.",
    "code": "LDA_obj=ov.utils.LDA_topic(adata,feature_type='expression',\n                  highly_variable_key='highly_variable_features',\n                 layers='counts',batch_key=None,learning_rate=1e-3)"
  },
  {
    "action": "Plot the topic contributions for the first 6 topics using `LDA_obj.plot_topic_contributions()`.",
    "code": "LDA_obj.plot_topic_contributions(6)"
  },
  {
    "action": "Predict the topic distribution for each cell using 13 topics with `LDA_obj.predicted()`.",
    "code": "LDA_obj.predicted(13)"
  },
  {
    "action": "Generate UMAP embeddings and visualize the distribution of topics across cells using `ov.utils.embedding()`. The `basis` is set to 'X_umap', `color` is set to `LDA_obj.model.topic_cols`, `cmap` is set to 'BuPu', `ncols` is set to 4, `add_outline` is set to True, and `frameon` is set to 'small'.",
    "code": "ov.plot_set()\nov.utils.embedding(adata, basis='X_umap',color = LDA_obj.model.topic_cols, cmap='BuPu', ncols=4,\n           add_outline=True,  frameon='small',)"
  },
  {
    "action": "Generate UMAP embeddings and visualize the clusters and LDA clustering results using `ov.utils.embedding()`. The `basis` is set to 'X_umap', `color` is set to ['clusters','LDA_cluster'], `frameon` is set to 'small', and `wspace` is set to 0.5.",
    "code": "ov.utils.embedding(adata,basis='X_umap',\n                   color=['clusters','LDA_cluster'],\n                   frameon='small',wspace=0.5)"
  },
  {
    "action": "Refine the LDA clustering results using a random forest classifier. Cells with LDA greater than 0.4 are used as a primitive class. The random forest model is trained on these cells and then used to classify cells with LDA less than 0.4. This is done using `LDA_obj.get_results_rfc()`.",
    "code": "LDA_obj.get_results_rfc(adata,use_rep='scaled|original|X_pca',\n                        LDA_threshold=0.4,num_topics=13)"
  },
  {
    "action": "Generate UMAP embeddings and visualize the refined LDA clustering results using `ov.utils.embedding()`. The `basis` is set to 'X_umap', `color` is set to ['LDA_cluster_rfc','LDA_cluster_clf'], `frameon` is set to 'small', and `wspace` is set to 0.5.",
    "code": "ov.utils.embedding(adata,basis='X_umap',\n                   color=['LDA_cluster_rfc','LDA_cluster_clf'],\n                   frameon='small',wspace=0.5)"
  },
  {
    "action": "Convert the sparse matrix `adata.X` to a dense array using `adata.X.toarray()`.",
    "code": "adata.X.toarray()"
  },
  {
    "action": "Initialize and run cNMF analysis. This includes initializing the `cnmf_obj` with specified parameters, factorizing the data, combining results, and generating a k-selection plot.",
    "code": "import numpy as np\n## Initialize the cnmf object that will be used to run analyses\ncnmf_obj = ov.single.cNMF(adata,components=np.arange(5,11), n_iter=20, seed=14, num_highvar_genes=2000,\n                          output_dir='example_dg1/cNMF', name='dg_cNMF')\n## Specify that the jobs are being distributed over a single worker (total_workers=1) and then launch that worker\ncnmf_obj.factorize(worker_i=0, total_workers=4)\ncnmf_obj.combine(skip_missing_files=True)\ncnmf_obj.k_selection_plot(close_fig=False)"
  },
  {
    "action": "Perform consensus clustering with a selected number of components (K=7) and a density threshold of 2.00. The results are then loaded and used to annotate the `adata` object.",
    "code": "selected_K = 7\ndensity_threshold = 2.00\ncnmf_obj.consensus(k=selected_K, \n                   density_threshold=density_threshold, \n                   show_clustering=True, \n                   close_clustergram_fig=False)\nresult_dict = cnmf_obj.load_results(K=selected_K, density_threshold=density_threshold)\ncnmf_obj.get_results(adata,result_dict)"
  },
  {
    "action": "Generate UMAP embeddings and visualize the cNMF usage scores using `ov.pl.embedding()`. The `basis` is set to 'X_umap', `color` is set to the columns of `result_dict['usage_norm']`, `use_raw` is set to False, `ncols` is set to 3, `vmin` is set to 0, `vmax` is set to 1, and `frameon` is set to 'small'.",
    "code": "ov.pl.embedding(adata, basis='X_umap',color=result_dict['usage_norm'].columns,\n           use_raw=False, ncols=3, vmin=0, vmax=1,frameon='small')"
  },
  {
    "action": "Refine the cNMF clustering results using a random forest classifier, similar to the LDA refinement. Cells with cNMF usage greater than 0.5 are used as a primitive class, and the random forest model is trained on these cells to classify cells with cNMF usage less than 0.5. This is done using `cnmf_obj.get_results_rfc()`.",
    "code": "cnmf_obj.get_results_rfc(adata,result_dict,\n                         use_rep='scaled|original|X_pca',\n                        cNMF_threshold=0.5)"
  },
  {
    "action": "Generate UMAP embeddings and visualize the refined cNMF clustering results using `ov.pl.embedding()`. The `basis` is set to 'X_umap', `color` is set to ['cNMF_cluster_rfc','cNMF_cluster_clf'], `frameon` is set to 'small', and other plotting parameters are specified.",
    "code": "ov.pl.embedding(\n    adata,\n    basis=\"X_umap\",\n    color=['cNMF_cluster_rfc','cNMF_cluster_clf'],\n    frameon='small',\n    #title=\"Celltypes\",\n    #legend_loc='on data',\n    legend_fontsize=14,\n    legend_fontoutline=2,\n    #size=10,\n    #legend_loc=True, \n    add_outline=False, \n    #add_outline=True,\n    outline_color='black',\n    outline_width=1,\n    show=False,\n)"
  },
  {
    "action": "Calculate the Adjusted Rand Index (ARI) for different clustering methods (Leiden, Louvain, GMM, LDA, LDA_rfc, LDA_clf, cNMF_rfc, cNMF_clf) compared to the 'clusters' annotation in `adata.obs`. The ARI values are printed for each method.",
    "code": "from sklearn.metrics.cluster import adjusted_rand_score\nARI = adjusted_rand_score(adata.obs['clusters'], adata.obs['leiden'])\nprint('Leiden, Adjusted rand index = %.2f' %ARI)\n\nARI = adjusted_rand_score(adata.obs['clusters'], adata.obs['louvain'])\nprint('Louvain, Adjusted rand index = %.2f' %ARI)\n\nARI = adjusted_rand_score(adata.obs['clusters'], adata.obs['gmm_cluster'])\nprint('GMM, Adjusted rand index = %.2f' %ARI)\n\nARI = adjusted_rand_score(adata.obs['clusters'], adata.obs['LDA_cluster'])\nprint('LDA, Adjusted rand index = %.2f' %ARI)\n\nARI = adjusted_rand_score(adata.obs['clusters'], adata.obs['LDA_cluster_rfc'])\nprint('LDA_rfc, Adjusted rand index = %.2f' %ARI)\n\nARI = adjusted_rand_score(adata.obs['clusters'], adata.obs['LDA_cluster_clf'])\nprint('LDA_clf, Adjusted rand index = %.2f' %ARI)\n\nARI = adjusted_rand_score(adata.obs['clusters'], adata.obs['cNMF_cluster_rfc'])\nprint('cNMF_rfc, Adjusted rand index = %.2f' %ARI)\n\nARI = adjusted_rand_score(adata.obs['clusters'], adata.obs['cNMF_cluster_clf'])\nprint('cNMF_clf, Adjusted rand index = %.2f' %ARI)"
  }
]