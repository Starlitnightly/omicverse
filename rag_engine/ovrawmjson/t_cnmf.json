[
  {
    "action": "Import necessary libraries: scanpy, omicverse, and scvelo. Set plotting parameters using `ov.plot_set()`.",
    "code": "import scanpy as sc\nimport omicverse as ov\nov.plot_set()\nimport scvelo as scv"
  },
  {
    "action": "Load the dentategyrus dataset using scvelo.",
    "code": "adata=scv.datasets.dentategyrus()"
  },
  {
    "action": "Preprocess the AnnData object using omicverse. The preprocessing steps include shiftlog normalization, Pearson residual scaling, and selecting the top 2000 highly variable genes.",
    "code": "get_ipython().run_cell_magic('time', '', \"adata=ov.pp.preprocess(adata,mode='shiftlog|pearson',n_HVGs=2000,)\\nadata\\n\")"
  },
  {
    "action": "Scale the data and perform Principal Component Analysis (PCA) on the preprocessed AnnData object.",
    "code": "ov.pp.scale(adata)\nov.pp.pca(adata)"
  },
  {
    "action": "Plot a UMAP embedding of the cells, colored by their cluster assignments.",
    "code": "import matplotlib.pyplot as plt\nfrom matplotlib import patheffects\nfig, ax = plt.subplots(figsize=(4,4))\nov.pl.embedding(\n    adata,\n    basis=\"X_umap\",\n    color=['clusters'],\n    frameon='small',\n    title=\"Celltypes\",\n    #legend_loc='on data',\n    legend_fontsize=14,\n    legend_fontoutline=2,\n    #size=10,\n    ax=ax,\n    #legend_loc=True, \n    add_outline=False, \n    #add_outline=True,\n    outline_color='black',\n    outline_width=1,\n    show=False,\n)"
  },
  {
    "action": "Initialize a cNMF object with specified parameters, including the range of components (K values) to explore, number of iterations, random seed, number of highly variable genes, output directory, and name.",
    "code": "import numpy as np\n## Initialize the cnmf object that will be used to run analyses\ncnmf_obj = ov.single.cNMF(adata,components=np.arange(5,11), n_iter=20, seed=14, num_highvar_genes=2000,\n                          output_dir='example_dg/cNMF', name='dg_cNMF')"
  },
  {
    "action": "Run the cNMF factorization on the specified worker.",
    "code": "## Specify that the jobs are being distributed over a single worker (total_workers=1) and then launch that worker\ncnmf_obj.factorize(worker_i=0, total_workers=2)"
  },
  {
    "action": "Combine the results from different workers, skipping missing files.",
    "code": "cnmf_obj.combine(skip_missing_files=True)"
  },
  {
    "action": "Generate a K selection plot to visualize the stability and error at each choice of K.",
    "code": "cnmf_obj.k_selection_plot(close_fig=False)"
  },
  {
    "action": "Set the selected K value and density threshold for consensus clustering.",
    "code": "selected_K = 7\ndensity_threshold = 2.00"
  },
  {
    "action": "Perform consensus clustering with the specified K value and density threshold, and visualize the clustering results.",
    "code": "cnmf_obj.consensus(k=selected_K, \n                   density_threshold=density_threshold, \n                   show_clustering=True, \n                   close_clustergram_fig=False)"
  },
  {
    "action": "Update the density threshold based on the initial consensus clustering results.",
    "code": "density_threshold = 0.10"
  },
  {
    "action": "Perform consensus clustering again with the updated density threshold.",
    "code": "cnmf_obj.consensus(k=selected_K, \n                   density_threshold=density_threshold, \n                   show_clustering=True, \n                   close_clustergram_fig=False)"
  },
  {
    "action": "Visualize the distance matrix of the consensus spectra using a heatmap.",
    "code": "import seaborn as sns\nimport matplotlib.pyplot as plt\nfrom matplotlib import patheffects\n\nfrom matplotlib import gridspec\nimport matplotlib.pyplot as plt\n\nwidth_ratios = [0.2, 4, 0.5, 10, 1]\nheight_ratios = [0.2, 4]\nfig = plt.figure(figsize=(sum(width_ratios), sum(height_ratios)))\ngs = gridspec.GridSpec(len(height_ratios), len(width_ratios), fig,\n                        0.01, 0.01, 0.98, 0.98,\n                       height_ratios=height_ratios,\n                       width_ratios=width_ratios,\n                       wspace=0, hspace=0)\n            \nD = cnmf_obj.topic_dist[cnmf_obj.spectra_order, :][:, cnmf_obj.spectra_order]\ndist_ax = fig.add_subplot(gs[1,1], xscale='linear', yscale='linear',\n                                      xticks=[], yticks=[],xlabel='', ylabel='',\n                                      frameon=True)\ndist_im = dist_ax.imshow(D, interpolation='none', cmap='viridis',\n                         aspect='auto', rasterized=True)\n\nleft_ax = fig.add_subplot(gs[1,0], xscale='linear', yscale='linear', xticks=[], yticks=[],\n                xlabel='', ylabel='', frameon=True)\nleft_ax.imshow(cnmf_obj.kmeans_cluster_labels.values[cnmf_obj.spectra_order].reshape(-1, 1),\n                            interpolation='none', cmap='Spectral', aspect='auto',\n                            rasterized=True)\n\ntop_ax = fig.add_subplot(gs[0,1], xscale='linear', yscale='linear', xticks=[], yticks=[],\n                xlabel='', ylabel='', frameon=True)\ntop_ax.imshow(cnmf_obj.kmeans_cluster_labels.values[cnmf_obj.spectra_order].reshape(1, -1),\n                  interpolation='none', cmap='Spectral', aspect='auto',\n                    rasterized=True)\n\ncbar_gs = gridspec.GridSpecFromSubplotSpec(3, 3, subplot_spec=gs[1, 2],\n                                   wspace=0, hspace=0)\ncbar_ax = fig.add_subplot(cbar_gs[1,2], xscale='linear', yscale='linear',\n    xlabel='', ylabel='', frameon=True, title='Euclidean\\nDistance')\ncbar_ax.set_title('Euclidean\\nDistance',fontsize=12)\nvmin = D.min().min()\nvmax = D.max().max()\nfig.colorbar(dist_im, cax=cbar_ax,\n        ticks=np.linspace(vmin, vmax, 3),\n        )\ncbar_ax.set_yticklabels(cbar_ax.get_yticklabels(),fontsize=12)\n"
  },
  {
    "action": "Plot a histogram of the local density values and indicate the filtering threshold.",
    "code": "density_filter = cnmf_obj.local_density.iloc[:, 0] < density_threshold\nfig, hist_ax = plt.subplots(figsize=(4,4))\n\n#hist_ax = fig.add_subplot(hist_gs[0,0], xscale='linear', yscale='linear',\n #   xlabel='', ylabel='', frameon=True, title='Local density histogram')\nhist_ax.hist(cnmf_obj.local_density.values, bins=np.linspace(0, 1, 50))\nhist_ax.yaxis.tick_right()\n\nxlim = hist_ax.get_xlim()\nylim = hist_ax.get_ylim()\nif density_threshold < xlim[1]:\n    hist_ax.axvline(density_threshold, linestyle='--', color='k')\n    hist_ax.text(density_threshold  + 0.02, ylim[1] * 0.95, 'filtering\\nthreshold\\n\\n', va='top')\nhist_ax.set_xlim(xlim)\nhist_ax.set_xlabel('Mean distance to k nearest neighbors\\n\\n%d/%d (%.0f%%) spectra above threshold\\nwere removed prior to clustering'%(sum(~density_filter), len(density_filter), 100*(~density_filter).mean()))\nhist_ax.set_title('Local density histogram')"
  },
  {
    "action": "Load the cNMF results for the selected K value and density threshold.",
    "code": "result_dict = cnmf_obj.load_results(K=selected_K, density_threshold=density_threshold)"
  },
  {
    "action": "Display the head of the normalized usage matrix.",
    "code": "result_dict['usage_norm'].head()"
  },
  {
    "action": "Display the head of the GEP scores matrix.",
    "code": "result_dict['gep_scores'].head()"
  },
  {
    "action": "Display the head of the GEP TPM matrix.",
    "code": "result_dict['gep_tpm'].head()"
  },
  {
    "action": "Display the head of the top genes matrix.",
    "code": "result_dict['top_genes'].head()"
  },
  {
    "action": "Assign cNMF cluster labels to cells in the AnnData object based on the loaded results.",
    "code": "cnmf_obj.get_results(adata,result_dict)"
  },
  {
    "action": "Plot UMAP embeddings of the cells, colored by the cNMF usage values for each program.",
    "code": "ov.pl.embedding(adata, basis='X_umap',color=result_dict['usage_norm'].columns,\n           use_raw=False, ncols=3, vmin=0, vmax=1,frameon='small')"
  },
  {
    "action": "Plot a UMAP embedding of the cells, colored by their assigned cNMF cluster labels.",
    "code": "ov.pl.embedding(\n    adata,\n    basis=\"X_umap\",\n    color=['cNMF_cluster'],\n    frameon='small',\n    #title=\"Celltypes\",\n    #legend_loc='on data',\n    legend_fontsize=14,\n    legend_fontoutline=2,\n    #size=10,\n    #legend_loc=True, \n    add_outline=False, \n    #add_outline=True,\n    outline_color='black',\n    outline_width=1,\n    show=False,\n)"
  },
  {
    "action": "Assign cNMF cluster labels using a random forest classifier (RFC) based on the usage values and a specified threshold.",
    "code": "cnmf_obj.get_results_rfc(adata,result_dict,\n                         use_rep='scaled|original|X_pca',\n                        cNMF_threshold=0.5)"
  },
  {
    "action": "Plot UMAP embeddings of the cells, colored by their assigned cNMF cluster labels from both the direct assignment and the RFC-based assignment.",
    "code": "ov.pl.embedding(\n    adata,\n    basis=\"X_umap\",\n    color=['cNMF_cluster_rfc','cNMF_cluster_clf'],\n    frameon='small',\n    #title=\"Celltypes\",\n    #legend_loc='on data',\n    legend_fontsize=14,\n    legend_fontoutline=2,\n    #size=10,\n    #legend_loc=True, \n    add_outline=False, \n    #add_outline=True,\n    outline_color='black',\n    outline_width=1,\n    show=False,\n)"
  },
  {
    "action": "Create a list of top genes for plotting.",
    "code": "plot_genes=[]\nfor i in result_dict['top_genes'].columns:\n    plot_genes+=result_dict['top_genes'][i][:3].values.reshape(-1).tolist()"
  },
  {
    "action": "Generate a dot plot of the top genes, grouped by cNMF cluster.",
    "code": "sc.pl.dotplot(adata,plot_genes,\n              \"cNMF_cluster\", dendrogram=False,standard_scale='var',)"
  }
]