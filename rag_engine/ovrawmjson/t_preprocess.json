[
  {
    "action": "Import necessary libraries: omicverse, scanpy, and set plotting parameters using `ov.ov_plot_set()`.",
    "code": "import omicverse as ov\nimport scanpy as sc\nov.ov_plot_set()"
  },
  {
    "action": "Create directories for data storage and download the 10x Genomics PBMC3k dataset.",
    "code": "# !mkdir data\n# !wget http://cf.10xgenomics.com/samples/cell-exp/1.1.0/pbmc3k/pbmc3k_filtered_gene_bc_matrices.tar.gz -O data/pbmc3k_filtered_gene_bc_matrices.tar.gz\n# !cd data; tar -xzf pbmc3k_filtered_gene_bc_matrices.tar.gz\n# !mkdir write"
  },
  {
    "action": "Read the 10x Genomics data into an AnnData object using `sc.read_10x_mtx()`.",
    "code": "adata = sc.read_10x_mtx(\n    'data/filtered_gene_bc_matrices/hg19/',  # the directory with the `.mtx` file\n    var_names='gene_symbols',                # use gene symbols for the variable names (variables-axis index)\n    cache=True)                              # write a cache file for faster subsequent reading\nadata"
  },
  {
    "action": "Make variable and observation names unique.",
    "code": "adata.var_names_make_unique()\nadata.obs_names_make_unique()"
  },
  {
    "action": "Perform quality control on the AnnData object using `ov.pp.qc()`, filtering cells based on mitochondrial gene percentage, number of UMIs, and number of detected genes.",
    "code": "adata=ov.pp.qc(adata,\n              tresh={'mito_perc': 0.05, 'nUMIs': 500, 'detected_genes': 250})\nadata"
  },
  {
    "action": "Store the original counts in `adata.uns['layers_counts']` using `ov.utils.store_layers()`.",
    "code": "ov.utils.store_layers(adata,layers='counts')\nadata"
  },
  {
    "action": "Preprocess the data using `ov.pp.preprocess()`, applying `shiftlog` normalization and Pearson residuals for highly variable gene detection.",
    "code": "adata=ov.pp.preprocess(adata,mode='shiftlog|pearson',n_HVGs=2000,)\nadata"
  },
  {
    "action": "Set the `.raw` attribute of the AnnData object to the normalized and logarithmized raw gene expression.",
    "code": "adata.raw = adata\nadata = adata[:, adata.var.highly_variable_features]\nadata"
  },
  {
    "action": "Retrieve the original counts from `adata.uns['layers_counts']` and compare the maximum values of normalized and raw count data.",
    "code": "adata_counts=adata.copy()\nov.utils.retrieve_layers(adata_counts,layers='counts')\nprint('normalize adata:',adata.X.max())\nprint('raw count adata:',adata_counts.X.max())"
  },
  {
    "action": "Display the AnnData object with raw counts.",
    "code": "adata_counts"
  },
  {
    "action": "Retrieve the original count matrix at the whole gene level.",
    "code": "adata_counts=adata.raw.to_adata().copy()\nov.utils.retrieve_layers(adata_counts,layers='counts')\nprint('normalize adata:',adata.X.max())\nprint('raw count adata:',adata_counts.X.max())\nadata_counts"
  },
  {
    "action": "Scale the data and store the results in a layer using `ov.pp.scale()`.",
    "code": "ov.pp.scale(adata)\nadata"
  },
  {
    "action": "Perform principal component analysis (PCA) on the scaled data using `ov.pp.pca()`.",
    "code": "ov.pp.pca(adata,layer='scaled',n_pcs=50)\nadata"
  },
  {
    "action": "Visualize the PCA embeddings using `ov.utils.embedding()`, coloring by the 'CST3' gene.",
    "code": "adata.obsm['X_pca']=adata.obsm['scaled|original|X_pca']\nov.utils.embedding(adata,\n                  basis='X_pca',\n                  color='CST3',\n                  frameon='small')"
  },
  {
    "action": "Compute the neighborhood graph using `sc.pp.neighbors()`.",
    "code": "sc.pp.neighbors(adata, n_neighbors=15, n_pcs=50,\n               use_rep='scaled|original|X_pca')"
  },
  {
    "action": "Calculate Minimum Distortion Embedding (MDE) using `ov.utils.mde()`.",
    "code": "adata.obsm[\"X_mde\"] = ov.utils.mde(adata.obsm[\"scaled|original|X_pca\"])\nadata"
  },
  {
    "action": "Visualize the MDE embeddings using `ov.utils.embedding()`, coloring by the 'CST3' gene.",
    "code": "ov.utils.embedding(adata,\n                basis='X_mde',\n                color='CST3',\n                frameon='small')"
  },
  {
    "action": "Compute UMAP embeddings using `sc.tl.umap()`.",
    "code": "sc.tl.umap(adata)"
  },
  {
    "action": "Visualize the UMAP embeddings using `ov.utils.embedding()`, coloring by the 'CST3' gene.",
    "code": "ov.utils.embedding(adata,\n                basis='X_umap',\n                color='CST3',\n                frameon='small')"
  },
  {
    "action": "Perform Leiden clustering using `sc.tl.leiden()`.",
    "code": "sc.tl.leiden(adata)"
  },
  {
    "action": "Visualize the MDE embeddings using `ov.utils.embedding()`, coloring by 'leiden', 'CST3', and 'NKG7'.",
    "code": "ov.utils.embedding(adata,\n                basis='X_mde',\n                color=['leiden', 'CST3', 'NKG7'],\n                frameon='small')"
  },
  {
    "action": "Visualize specific clusters using `ov.utils.plot_ConvexHull()`.",
    "code": "import matplotlib.pyplot as plt\nfig,ax=plt.subplots( figsize = (4,4))\n\nov.utils.embedding(adata,\n                basis='X_mde',\n                color=['leiden'],\n                frameon='small',\n                show=False,\n                ax=ax)\n\nov.utils.plot_ConvexHull(adata,\n                basis='X_mde',\n                cluster_key='leiden',\n                hull_cluster='0',\n                ax=ax)"
  },
  {
    "action": "Generate and display labels for Leiden clusters using `ov.utils.gen_mpl_labels()` with custom styling.",
    "code": "from matplotlib import patheffects\nimport matplotlib.pyplot as plt\nfig, ax = plt.subplots(figsize=(4,4))\n\nov.utils.embedding(adata,\n                  basis='X_mde',\n                  color=['leiden'],\n                   show=False, legend_loc=None, add_outline=False, \n                   frameon='small',legend_fontoutline=2,ax=ax\n                 )\n\nov.utils.gen_mpl_labels(\n    adata,\n    'leiden',\n    exclude=(\"None\",),  \n    basis='X_mde',\n    ax=ax,\n    adjust_kwargs=dict(arrowprops=dict(arrowstyle='-', color='black')),\n    text_kwargs=dict(fontsize= 12 ,weight='bold',\n                     path_effects=[patheffects.withStroke(linewidth=2, foreground='w')] ),\n)"
  },
  {
    "action": "Define a list of marker genes.",
    "code": "marker_genes = ['IL7R', 'CD79A', 'MS4A1', 'CD8A', 'CD8B', 'LYZ', 'CD14',\n                'LGALS3', 'S100A8', 'GNLY', 'NKG7', 'KLRB1',\n                'FCGR3A', 'MS4A7', 'FCER1A', 'CST3', 'PPBP']"
  },
  {
    "action": "Create a dot plot of the marker genes using `sc.pl.dotplot()`.",
    "code": "sc.pl.dotplot(adata, marker_genes, groupby='leiden',\n             standard_scale='var');"
  },
  {
    "action": "Calculate a dendrogram and rank genes using t-test with `sc.tl.dendrogram()` and `sc.tl.rank_genes_groups()`, then visualize the results with `sc.pl.rank_genes_groups_dotplot()`.",
    "code": "sc.tl.dendrogram(adata,'leiden',use_rep='scaled|original|X_pca')\nsc.tl.rank_genes_groups(adata, 'leiden', use_rep='scaled|original|X_pca',\n                        method='t-test',use_raw=False,key_added='leiden_ttest')\nsc.pl.rank_genes_groups_dotplot(adata,groupby='leiden',\n                                cmap='Spectral_r',key='leiden_ttest',\n                                standard_scale='var',n_genes=3)"
  },
  {
    "action": "Rank genes using t-test and COSG with `sc.tl.rank_genes_groups()` and `ov.single.cosg()`, then visualize the results with `sc.pl.rank_genes_groups_dotplot()`.",
    "code": "sc.tl.rank_genes_groups(adata, groupby='leiden', \n                        method='t-test',use_rep='scaled|original|X_pca',)\nov.single.cosg(adata, key_added='leiden_cosg', groupby='leiden')\nsc.pl.rank_genes_groups_dotplot(adata,groupby='leiden',\n                                cmap='Spectral_r',key='leiden_cosg',\n                                standard_scale='var',n_genes=3)"
  },
  {
    "action": "Prepare a dictionary of DataFrames for the stacked volcano plot, where each DataFrame contains gene names, log fold changes, and adjusted p-values for each Leiden cluster.",
    "code": "data_dict={}\nfor i in adata.obs['leiden'].cat.categories:\n    data_dict[i]=sc.get.rank_genes_groups_df(adata, group=i, key='leiden_ttest',\n                                            pval_cutoff=None,log2fc_min=None)"
  },
  {
    "action": "Print keys of the data_dict",
    "code": "data_dict.keys()"
  },
  {
    "action": "Print the head of the DataFrame for a specific cluster",
    "code": "data_dict[i].head()"
  },
  {
    "action": "Prepare a dictionary mapping Leiden cluster names to colors.",
    "code": "type_color_dict=dict(zip(adata.obs['leiden'].cat.categories,\n                         adata.uns['leiden_colors']))\ntype_color_dict"
  },
  {
    "action": "Create a stacked volcano plot using `ov.utils.stacking_vol()` with specified parameters.",
    "code": "fig,axes=ov.utils.stacking_vol(data_dict,type_color_dict,\n            pval_threshold=0.01,\n            log2fc_threshold=2,\n            figsize=(8,4),\n            sig_color='#a51616',\n            normal_color='#c7c7c7',\n            plot_genes_num=2,\n            plot_genes_fontsize=6,\n            plot_genes_weight='bold',\n            )\n\n#The following code will be removed in future\ny_min,y_max=0,0\nfor i in data_dict.keys():\n    y_min=min(y_min,data_dict[i]['logfoldchanges'].min())\n    y_max=max(y_max,data_dict[i]['logfoldchanges'].max())\nfor i in adata.obs['leiden'].cat.categories:\n    axes[i].set_ylim(y_min,y_max)\nplt.suptitle('Stacking_vol',fontsize=12)   "
  }
]