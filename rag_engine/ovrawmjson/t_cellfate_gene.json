[
  {
    "action": "Import necessary libraries: omicverse, scvelo, and matplotlib. Set plotting parameters using `ov.ov_plot_set()`.",
    "code": "import omicverse as ov\nimport scvelo as scv\nimport matplotlib.pyplot as plt\nov.ov_plot_set()"
  },
  {
    "action": "Load the dentategyrus dataset using `scv.datasets.dentategyrus()`.",
    "code": "adata = scv.datasets.dentategyrus()\nadata"
  },
  {
    "action": "Perform quality control on the dataset using `ov.pp.qc()`, filtering cells based on mitochondrial percentage, number of UMIs, and number of detected genes.",
    "code": "adata=ov.pp.qc(adata,\n              tresh={'mito_perc': 0.15, 'nUMIs': 500, 'detected_genes': 250},\n              )"
  },
  {
    "action": "Store the raw counts in the 'counts' layer using `ov.utils.store_layers()`.",
    "code": "ov.utils.store_layers(adata,layers='counts')\nadata"
  },
  {
    "action": "Preprocess the dataset using `ov.pp.preprocess()` with 'shiftlog|pearson' mode and selecting 2000 highly variable genes.",
    "code": "adata=ov.pp.preprocess(adata,mode='shiftlog|pearson',\n                       n_HVGs=2000)"
  },
  {
    "action": "Store the raw data in `adata.raw` and subset the data to include only highly variable genes.",
    "code": "adata.raw = adata\nadata = adata[:, adata.var.highly_variable_features]\nadata"
  },
  {
    "action": "Scale the data using `ov.pp.scale()` and perform PCA using `ov.pp.pca()` on the scaled data with 50 principal components. Then, apply MDE to the PCA results.",
    "code": "ov.pp.scale(adata)\nov.pp.pca(adata,layer='scaled',n_pcs=50)\n\nadata.obsm[\"X_mde_pca\"] = ov.utils.mde(adata.obsm[\"scaled|original|X_pca\"])"
  },
  {
    "action": "Convert the raw data back to an AnnData object.",
    "code": "adata=adata.raw.to_adata()"
  },
  {
    "action": "Create an embedding plot using `ov.utils.embedding()` based on 'X_mde_pca' and color the points by 'clusters'.",
    "code": "fig, ax = plt.subplots(figsize=(3,3))\nov.utils.embedding(adata,\n                basis='X_mde_pca',frameon='small',\n                color=['clusters'],show=False,ax=ax)"
  },
  {
    "action": "Filter out cells belonging to the 'Endothelial' cluster and initialize a SEACells model.",
    "code": "import SEACells\nadata=adata[adata.obs['clusters']!='Endothelial']\nmodel = SEACells.core.SEACells(adata, \n                  build_kernel_on='scaled|original|X_pca', \n                  n_SEACells=200, \n                  n_waypoint_eigs=10,\n                  convergence_epsilon = 1e-5)"
  },
  {
    "action": "Construct the kernel matrix using the initialized SEACells model.",
    "code": "model.construct_kernel_matrix()\nM = model.kernel_matrix\n# Initialize archetypes\nmodel.initialize_archetypes()"
  },
  {
    "action": "Fit the SEACells model with a minimum of 10 and a maximum of 50 iterations.",
    "code": "model.fit(min_iter=10, max_iter=50)"
  },
  {
    "action": "Plot the convergence of the SEACells model.",
    "code": "# Check for convergence \nget_ipython().run_line_magic('matplotlib', 'inline')\nmodel.plot_convergence()"
  },
  {
    "action": "Force the model to run additional iterations using the `model.step()` function.",
    "code": "# You can force the model to run additional iterations step-wise using the .step() function\nprint(f'Run for {len(model.RSS_iters)} iterations')\nfor _ in range(10):\n    model.step()\nprint(f'Run for {len(model.RSS_iters)} iterations')"
  },
  {
    "action": "Plot the convergence of the SEACells model again.",
    "code": "# Check for convergence \nget_ipython().run_line_magic('matplotlib', 'inline')\nmodel.plot_convergence()"
  },
  {
    "action": "Plot a 2D representation of the Dentategyrus Metacells using `SEACells.plot.plot_2D()`.",
    "code": "get_ipython().run_line_magic('matplotlib', 'inline')\nSEACells.plot.plot_2D(adata, key='X_mde_pca', colour_metacells=False,\n                     figsize=(4,4),cell_size=20,title='Dentategyrus Metacells',\n                     )"
  },
  {
    "action": "Set `adata.raw` to a copy of `adata`.",
    "code": "adata.raw=adata.copy()"
  },
  {
    "action": "Summarize the data by soft SEACells using `SEACells.core.summarize_by_soft_SEACell()`.",
    "code": "SEACell_soft_ad = SEACells.core.summarize_by_soft_SEACell(adata, model.A_, \n                                                          celltype_label='clusters',\n                                                          summarize_layer='raw', minimum_weight=0.05)\nSEACell_soft_ad"
  },
  {
    "action": "Set `SEACell_soft_ad.raw` to a copy of `SEACell_soft_ad` and identify highly variable genes.",
    "code": "import scanpy as sc\nSEACell_soft_ad.raw=SEACell_soft_ad.copy()\nsc.pp.highly_variable_genes(SEACell_soft_ad, n_top_genes=2000, inplace=True)\nSEACell_soft_ad=SEACell_soft_ad[:,SEACell_soft_ad.var.highly_variable]"
  },
  {
    "action": "Scale the data in `SEACell_soft_ad`, perform PCA, compute neighbors, and generate a UMAP embedding.",
    "code": "ov.pp.scale(SEACell_soft_ad)\nov.pp.pca(SEACell_soft_ad,layer='scaled',n_pcs=50)\nsc.pp.neighbors(SEACell_soft_ad, use_rep='scaled|original|X_pca')\nsc.tl.umap(SEACell_soft_ad)"
  },
  {
    "action": "Set the 'celltype' observation to a categorical type and reorder categories based on `adata.obs['clusters']`. Also, set the color palette.",
    "code": "SEACell_soft_ad.obs['celltype']=SEACell_soft_ad.obs['celltype'].astype('category')\nSEACell_soft_ad.obs['celltype']=SEACell_soft_ad.obs['celltype'].cat.reorder_categories(adata.obs['clusters'].cat.categories)\nSEACell_soft_ad.uns['celltype_colors']=adata.uns['clusters_colors']"
  },
  {
    "action": "Create an embedding plot of the metacells using `ov.utils.embedding()` based on 'X_umap' and color the points by 'celltype'.",
    "code": "import matplotlib.pyplot as plt\nfig, ax = plt.subplots(figsize=(3,3))\nov.utils.embedding(SEACell_soft_ad,\n                   basis='X_umap',\n                   color=[\"celltype\"],\n                   title='Meta Celltype',\n                   frameon='small',\n                   legend_fontsize=12,\n                   #palette=ov.utils.palette()[11:],\n                   ax=ax,\n                   show=False)"
  },
  {
    "action": "Calculate pseudotime using pyVIA with manually adjusted parameters.",
    "code": "v0 = ov.single.pyVIA(adata=SEACell_soft_ad,adata_key='scaled|original|X_pca',\n                         adata_ncomps=50, basis='X_umap',\n                         clusters='celltype',knn=10, root_user=['nIPC','Neuroblast'],\n                         dataset='group', \n                         random_seed=112,is_coarse=True, \n                         preserve_disconnected=True,\n                         piegraph_arrow_head_width=0.05,piegraph_edgeweight_scalingfactor=2.5,\n                         gene_matrix=SEACell_soft_ad.X,velo_weight=0.5,\n                         edgebundle_pruning_twice=False, edgebundle_pruning=0.15, \n                         jac_std_global=0.05,too_big_factor=0.05,\n                         cluster_graph_pruning_std=1,\n                         time_series=False,\n                        )\n\nv0.run()"
  },
  {
    "action": "Obtain the pseudotime values and store them in the `SEACell_soft_ad` object.",
    "code": "v0.get_pseudotime(SEACell_soft_ad)"
  },
  {
    "action": "Create an embedding plot using `ov.utils.embedding()` based on 'X_umap' and color the points by 'pt_via' (pseudotime).",
    "code": "#v0.get_pseudotime(SEACell_soft_ad)\nimport matplotlib.pyplot as plt\nfig, ax = plt.subplots(figsize=(3,3))\nov.utils.embedding(SEACell_soft_ad,\n                   basis='X_umap',\n                   color=[\"pt_via\"],\n                   title='Pseudotime',\n                   frameon='small',\n                   cmap='Reds',\n                   #size=40,\n                   legend_fontsize=12,\n                   #palette=ov.utils.palette()[11:],\n                   ax=ax,\n                   show=False)"
  },
  {
    "action": "Save the metacell results to an h5ad file.",
    "code": "SEACell_soft_ad.write_h5ad('data/tutorial_meta_den.h5ad',compression='gzip')"
  },
  {
    "action": "Read the metacell results from the h5ad file.",
    "code": "SEACell_soft_ad=ov.utils.read('data/tutorial_meta_den.h5ad')"
  },
  {
    "action": "Initialize the cellfategenie object with the metacell data and pseudotime.",
    "code": "cfg_obj=ov.single.cellfategenie(SEACell_soft_ad,pseudotime='pt_via')\ncfg_obj.model_init()"
  },
  {
    "action": "Perform Adaptive Threshold Regression (ATR) to find the minimum number of genes for accurate regression.",
    "code": "cfg_obj.ATR(stop=500,flux=0.01)"
  },
  {
    "action": "Plot the filtering results from the ATR analysis.",
    "code": "fig,ax=cfg_obj.plot_filtering(color='#5ca8dc')\nax.set_title('Dentategyrus Metacells\\nCellFateGenie')"
  },
  {
    "action": "Fit the model and obtain the results.",
    "code": "res=cfg_obj.model_fit()"
  },
  {
    "action": "Plot the color fitting for the raw data type, colored by cell type.",
    "code": "cfg_obj.plot_color_fitting(type='raw',cluster_key='celltype')"
  },
  {
    "action": "Plot the color fitting for the filtered data type, colored by cell type.",
    "code": "cfg_obj.plot_color_fitting(type='filter',cluster_key='celltype')"
  },
  {
    "action": "Perform Kendalltau test to filter genes based on trend significance.",
    "code": "kt_filter=cfg_obj.kendalltau_filter()\nkt_filter.head()"
  },
  {
    "action": "Extract gene names with p-value less than the mean p-value and calculate gene trends.",
    "code": "var_name=kt_filter.loc[kt_filter['pvalue']<kt_filter['pvalue'].mean()].index.tolist()\ngt_obj=ov.single.gene_trends(SEACell_soft_ad,'pt_via',var_name)\ngt_obj.calculate(n_convolve=10)"
  },
  {
    "action": "Print the dimension (number of genes) after filtering.",
    "code": "print(f\"Dimension: {len(var_name)}\")"
  },
  {
    "action": "Plot the gene trends using `gt_obj.plot_trend()`.",
    "code": "fig,ax=gt_obj.plot_trend(color=ov.utils.blue_color[3])\nax.set_title(f'Dentategyrus meta\\nCellfategenie',fontsize=13)"
  },
  {
    "action": "Plot a heatmap of gene expression for the selected genes, sorted by pseudotime.",
    "code": "g=ov.utils.plot_heatmap(SEACell_soft_ad,var_names=var_name,\n                  sortby='pt_via',col_color='celltype',\n                 n_convolve=10,figsize=(1,6),show=False)\n\ng.fig.set_size_inches(2, 6)\ng.fig.suptitle('CellFateGenie',x=0.25,y=0.83,\n               horizontalalignment='left',fontsize=12,fontweight='bold')\ng.ax_heatmap.set_yticklabels(g.ax_heatmap.get_yticklabels(),fontsize=12)\nplt.show()"
  },
  {
    "action": "Calculate border cells using `gt_obj.cal_border_cell()`.",
    "code": "gt_obj.cal_border_cell(SEACell_soft_ad,'pt_via','celltype')"
  },
  {
    "action": "Get multiple border genes using `gt_obj.get_multi_border_gene()`.",
    "code": "bordgene_dict=gt_obj.get_multi_border_gene(SEACell_soft_ad,'celltype',\n                                          threshold=0.5)"
  },
  {
    "action": "Get border genes between 'Granule immature' and 'Granule mature' cell types.",
    "code": "gt_obj.get_border_gene(SEACell_soft_ad,'celltype','Granule immature','Granule mature',\n                      threshold=0.5)"
  },
  {
    "action": "Get special border genes between 'Granule immature' and 'Granule mature' cell types.",
    "code": "gt_obj.get_special_border_gene(SEACell_soft_ad,'celltype','Granule immature','Granule mature')"
  },
  {
    "action": "Plot a heatmap of gene expression for the border genes between 'Granule immature' and 'Granule mature'.",
    "code": "import matplotlib.pyplot as plt\ng=ov.utils.plot_heatmap(SEACell_soft_ad,\n                        var_names=gt_obj.get_border_gene(SEACell_soft_ad,'celltype','Granule immature','Granule mature'),\n                  sortby='pt_via',col_color='celltype',yticklabels=True,\n                 n_convolve=10,figsize=(1,6),show=False)\n\ng.fig.set_size_inches(2, 4)\ng.ax_heatmap.set_yticklabels(g.ax_heatmap.get_yticklabels(),fontsize=12)\nplt.show()"
  },
  {
    "action": "Get special kernel genes for the 'Granule immature' cell type.",
    "code": "gt_obj.get_special_kernel_gene(SEACell_soft_ad,'celltype','Granule immature')"
  },
  {
    "action": "Get kernel genes for the 'Granule immature' cell type with a specified threshold and number of genes.",
    "code": "gt_obj.get_kernel_gene(SEACell_soft_ad,\n                       'celltype','Granule immature',\n                       threshold=0.3,\n                      num_gene=10)"
  },
  {
    "action": "Plot a heatmap of gene expression for the kernel genes of the 'Granule immature' cell type.",
    "code": "import matplotlib.pyplot as plt\ng=ov.utils.plot_heatmap(SEACell_soft_ad,\n                        var_names=gt_obj.get_kernel_gene(SEACell_soft_ad,\n                       'celltype','Granule immature',\n                       threshold=0.3,\n                      num_gene=10),\n                  sortby='pt_via',col_color='celltype',yticklabels=True,\n                 n_convolve=10,figsize=(1,6),show=False)\n\ng.fig.set_size_inches(2, 4)\ng.ax_heatmap.set_yticklabels(g.ax_heatmap.get_yticklabels(),fontsize=12)\nplt.show()"
  }
]