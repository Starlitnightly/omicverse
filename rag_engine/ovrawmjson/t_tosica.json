[
  {
    "action": "Import necessary libraries: omicverse and scanpy. Set plotting parameters using `ov.utils.ov_plot_set()`.",
    "code": "import omicverse as ov\nimport scanpy as sc\nov.utils.ov_plot_set()"
  },
  {
    "action": "Load the reference AnnData object from 'demo_train.h5ad' and print its shape and cell type counts.",
    "code": "ref_adata = sc.read('demo_train.h5ad')\nref_adata = ref_adata[:,ref_adata.var_names]\nprint(ref_adata)\nprint(ref_adata.obs.Celltype.value_counts())"
  },
  {
    "action": "Load the query AnnData object from 'demo_test.h5ad', subset it to the same genes as the reference data, and print its shape and cell type counts.",
    "code": "query_adata = sc.read('demo_test.h5ad')\nquery_adata = query_adata[:,ref_adata.var_names]\nprint(query_adata)\nprint(query_adata.obs.Celltype.value_counts())"
  },
  {
    "action": "Make variable names unique and select the common genes between the reference and query datasets.",
    "code": "ref_adata.var_names_make_unique()\nquery_adata.var_names_make_unique()\nret_gene=list(set(query_adata.var_names) & set(ref_adata.var_names))\nlen(ret_gene)"
  },
  {
    "action": "Subset both reference and query datasets to the common genes.",
    "code": "query_adata=query_adata[:,ret_gene]\nref_adata=ref_adata[:,ret_gene]"
  },
  {
    "action": "Print the maximum values of the expression matrices in the reference and query datasets to confirm that they have been normalized and log-transformed.",
    "code": "print(f\"The max of ref_adata is {ref_adata.X.max()}, query_data is {query_adata.X.max()}\",)"
  },
  {
    "action": "Download the TOSICA gene sets (GMT files) using `ov.utils.download_tosica_gmt()`. These gene sets will be used as pathways for the TOSICA model.",
    "code": "ov.utils.download_tosica_gmt()"
  },
  {
    "action": "Initialize the TOSICA model using the `ov.single.pyTOSICA` class. Set the reference AnnData object, the path to the GMT file, the depth of the transformer model, the key for cell type labels, the project path for saving the model, and the batch size.",
    "code": "tosica_obj=ov.single.pyTOSICA(adata=ref_adata,\n                              gmt_path='genesets/GO_bp.gmt', depth=1,\n                              label_name='Celltype',\n                              project_path='hGOBP_demo',\n                              batch_size=8)"
  },
  {
    "action": "Train the TOSICA model using the `train` method. Set the number of epochs.",
    "code": "tosica_obj.train(epochs=5)"
  },
  {
    "action": "Save the trained TOSICA model to the specified project path.",
    "code": "tosica_obj.save()"
  },
  {
    "action": "Load the saved TOSICA model from the project path.",
    "code": "tosica_obj.load()"
  },
  {
    "action": "Predict cell types in the query dataset using the trained TOSICA model and the `predicted` method. The predicted cell types and associated information are stored in a new AnnData object.",
    "code": "new_adata=tosica_obj.predicted(pre_adata=query_adata)"
  },
  {
    "action": "Preprocess the query dataset by scaling the data, performing PCA, computing a neighborhood graph, and reducing the dimensionality using MDE.",
    "code": "ov.pp.scale(query_adata)\nov.pp.pca(query_adata,layer='scaled',n_pcs=50)\nsc.pp.neighbors(query_adata, n_neighbors=15, n_pcs=50,\n               use_rep='scaled|original|X_pca')\nquery_adata.obsm[\"X_mde\"] = ov.utils.mde(query_adata.obsm[\"scaled|original|X_pca\"])\nquery_adata"
  },
  {
    "action": "Copy the low-dimensional embeddings and neighborhood graph from the query dataset to the new AnnData object containing the predicted cell types.",
    "code": "new_adata.obsm=query_adata[new_adata.obs.index].obsm.copy()\nnew_adata.obsp=query_adata[new_adata.obs.index].obsp.copy()\nnew_adata"
  },
  {
    "action": "Set the colors for the predicted and original cell types in the new AnnData object for visualization purposes.",
    "code": "import numpy as np\ncol = np.array([\n\"#98DF8A\",\"#E41A1C\" ,\"#377EB8\", \"#4DAF4A\" ,\"#984EA3\" ,\"#FF7F00\" ,\"#FFFF33\" ,\"#A65628\" ,\"#F781BF\" ,\"#999999\",\"#1F77B4\",\"#FF7F0E\",\"#279E68\",\"#FF9896\"\n]).astype('<U7')\n\ncelltype = (\"alpha\",\"beta\",\"ductal\",\"acinar\",\"delta\",\"PP\",\"PSC\",\"endothelial\",\"epsilon\",\"mast\",\"macrophage\",\"schwann","t_cell\")\nnew_adata.obs['Prediction'] = new_adata.obs['Prediction'].astype('category')\nnew_adata.obs['Prediction'] = new_adata.obs['Prediction'].cat.reorder_categories(list(celltype))\nnew_adata.uns['Prediction_colors'] = col[1:]\n\ncelltype = (\"MHC class II\",\"alpha\",\"beta\",\"ductal\",\"acinar\",\"delta\",\"PP\",\"PSC\",\"endothelial\",\"epsilon\",\"mast\")\nnew_adata.obs['Celltype'] = new_adata.obs['Celltype'].astype('category')\nnew_adata.obs['Celltype'] = new_adata.obs['Celltype'].cat.reorder_categories(list(celltype))\nnew_adata.uns['Celltype_colors'] = col[:11]": "Set the colors for the predicted and original cell types in the new AnnData object for visualization purposes."
  },
  {
    "action": "Plot the MDE embeddings of the new AnnData object, colored by the original and predicted cell types.",
    "code": "sc.pl.embedding(\n    new_adata,\n    basis=\"X_mde\",\n    color=['Celltype', 'Prediction'],\n    frameon=False,\n    #ncols=1,\n    wspace=0.5,\n    #palette=ov.utils.pyomic_palette()[11:],\n    show=False,\n)"
  },
  {
    "action": "Filter out predicted cell types with fewer than 5 cells.",
    "code": "cell_idx=new_adata.obs['Prediction'].value_counts()[new_adata.obs['Prediction'].value_counts()<5].index\nnew_adata=new_adata[~new_adata.obs['Prediction'].isin(cell_idx)]"
  },
  {
    "action": "Calculate the differentially expressed pathways between the predicted cell types using `sc.tl.rank_genes_groups` with the Wilcoxon rank-sum test.",
    "code": "sc.tl.rank_genes_groups(new_adata, 'Prediction', method='wilcoxon')"
  },
  {
    "action": "Plot a dot plot showing the top 3 differentially expressed pathways for each predicted cell type.",
    "code": "sc.pl.rank_genes_groups_dotplot(new_adata,\n                                n_genes=3,standard_scale='var',)"
  },
  {
    "action": "Retrieve the differentially expressed pathways for the 'PP' cell type using `sc.get.rank_genes_groups_df`.",
    "code": "degs = sc.get.rank_genes_groups_df(new_adata, group='PP', key='rank_genes_groups',\n                                            pval_cutoff=0.05)\ndegs.head()"
  },
  {
    "action": "Plot the MDE embeddings of the new AnnData object, colored by the predicted cell types and the expression of the 'GOBP_REGULATION_OF_MUSCLE_SYSTEM_PROCESS' pathway.",
    "code": "sc.pl.embedding(\n    new_adata,\n    basis=\"X_mde\",\n    color=['Prediction','GOBP_REGULATION_OF_MUSCLE_SYSTEM_PROCESS'],\n    frameon=False,\n    #ncols=1,\n    wspace=0.5,\n    #palette=ov.utils.pyomic_palette()[11:],\n    show=False,\n)"
  }
]