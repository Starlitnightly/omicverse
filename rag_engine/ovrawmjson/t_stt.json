[
  {
    "action": "Import necessary libraries: scanpy and omicverse. Set plotting parameters using `ov.plot_set()`.",
    "code": "import scanpy as sc\nimport omicverse as ov\nov.plot_set()"
  },
  {
    "action": "Import specific modules from the omicverse.external.starfysh subpackage: AA (Archetypal Analysis), utils (utility functions), plot_utils (plotting utilities), post_analysis (post-analysis functions), and _starfysh (Starfysh model).",
    "code": "from omicverse.externel.starfysh import (AA, utils, plot_utils, post_analysis)\nfrom omicverse.externel.starfysh import _starfysh as sf_model"
  },
  {
    "action": "Define file paths for the data, sample ID, and signature gene set file name.",
    "code": "# Specify data paths\ndata_path = 'data/star_data'\nsample_id = 'CID44971_TNBC'\nsig_name = 'bc_signatures_version_1013.csv'"
  },
  {
    "action": "Load expression count data and signature gene sets using custom utility functions. The `load_adata` function reads spatial transcriptomics data, and `filter_gene_sig` filters the signature gene sets based on the expression data.",
    "code": "# Load expression counts and signature gene sets\nadata, adata_normed = utils.load_adata(data_folder=data_path,\n                                       sample_id=sample_id, # sample id\n                                       n_genes=2000  # number of highly variable genes to keep\n                                       )"
  },
  {
    "action": "Import pandas and os libraries. Load signature gene sets from a CSV file into a pandas DataFrame. Filter the gene signatures to include only genes present in the expression data.",
    "code": "import pandas as pd\nimport os\ngene_sig = pd.read_csv(os.path.join(data_path, sig_name))\ngene_sig = utils.filter_gene_sig(gene_sig, adata.to_df())\ngene_sig.head()"
  },
  {
    "action": "Load and preprocess spatial information associated with the expression data. This includes image data, mapping information, and scaling factors. Calculate a UMAP representation of the data for visualization.",
    "code": "# Load spatial information\nimg_metadata = utils.preprocess_img(data_path,\n                                    sample_id,\n                                    adata_index=adata.obs.index,\n                                    #hchannel=False\n                                    )\nimg, map_info, scalefactor = img_metadata['img'], img_metadata['map_info'], img_metadata['scalefactor']\numap_df = utils.get_umap(adata, display=True)"
  },
  {
    "action": "Import the matplotlib.pyplot module for plotting. Create a new figure and display the image data loaded in the previous step.",
    "code": "import matplotlib.pyplot as plt\nplt.figure(figsize=(6, 6), dpi=80)\nplt.imshow(img)"
  },
  {
    "action": "Display the first few rows of the `map_info` DataFrame, which contains spatial mapping information.",
    "code": "map_info.head()"
  },
  {
    "action": "Define parameters for Starfysh model training using the `VisiumArguments` class. This includes raw and normalized expression data, filtered signature genes, image metadata, number of anchor spots, window size for spatial smoothing, and sample ID. Prepare the AnnData objects and calculate anchor spots.",
    "code": "# Parameters for training\nvisium_args = utils.VisiumArguments(adata,\n                                    adata_normed,\n                                    gene_sig,\n                                    img_metadata,\n                                    n_anchors=60,\n                                    window_size=3,\n                                    sample_id=sample_id\n                                   )\n\nadata, adata_normed = visium_args.get_adata()\nanchors_df = visium_args.get_anchors()"
  },
  {
    "action": "Add log-transformed library size and windowed log-transformed library size to the observation metadata of the `adata` object.",
    "code": "adata.obs['log library size']=visium_args.log_lib\nadata.obs['windowed log library size']=visium_args.win_loglib"
  },
  {
    "action": "Use scanpy's `sc.pl.spatial` function to visualize the log library size on a spatial map. The plot is colored using the 'magma' colormap.",
    "code": "sc.pl.spatial(adata, cmap='magma',\n                  # show first 8 cell types\n                  color='log library size',\n                  ncols=4, size=1.3,\n                  img_key='hires',\n                  #palette=Layer_color\n                  # limit color scale at 99.2% quantile of cell abundance\n                  #vmin=0, vmax='p99.2'\n                 )"
  },
  {
    "action": "Visualize the windowed log library size on a spatial map using scanpy's `sc.pl.spatial` function. The plot is colored using the 'magma' colormap.",
    "code": "sc.pl.spatial(adata, cmap='magma',\n                  # show first 8 cell types\n                  color='windowed log library size',\n                  ncols=4, size=1.3,\n                  img_key='hires',\n                  #palette=Layer_color\n                  # limit color scale at 99.2% quantile of cell abundance\n                  #vmin=0, vmax='p99.2'\n                 )"
  },
  {
    "action": "Visualize the raw gene expression of the gene 'IL7R' on a spatial map using scanpy's `sc.pl.spatial` function. The plot is colored using the 'magma' colormap.",
    "code": "sc.pl.spatial(adata, cmap='magma',\n                  # show first 8 cell types\n                  color='IL7R',\n                  ncols=4, size=1.3,\n                  img_key='hires',\n                  #palette=Layer_color\n                  # limit color scale at 99.2% quantile of cell abundance\n                  #vmin=0, vmax='p99.2'\n                 )"
  },
  {
    "action": "Plot anchor spots on a UMAP representation of the data using the `plot_anchor_spots` function from `plot_utils`. This visualization helps to identify the locations of anchor spots for each cell type.",
    "code": "plot_utils.plot_anchor_spots(umap_df,\n                             visium_args.pure_spots,\n                             visium_args.sig_mean,\n                             bbox_x=2\n                            )"
  },
  {
    "action": "Initialize an Archetypal Analysis (AA) model using the normalized AnnData object. Compute archetypes, find archetypal spots and clusters, define marker genes for each archetypal cluster, map archetypes to the closest anchor spots, and optionally find distant archetypes not assigned to any annotated cell types.",
    "code": "aa_model = AA.ArchetypalAnalysis(adata_orig=adata_normed)\narchetype, arche_dict, major_idx, evs = aa_model.compute_archetypes(cn=40)\n# (1). Find archetypal spots & archetypal clusters\narche_df = aa_model.find_archetypal_spots(major=True)\n\n# (2). Find marker genes associated with each archetypal cluster\nmarkers_df = aa_model.find_markers(n_markers=30, display=False)\n\n# (3). Map archetypes to closest anchors (1-1 per cell type)\nmap_df, map_dict = aa_model.assign_archetypes(anchors_df)\n\n# (4). Optional: Find the most distant archetypes that are not assigned to any annotated cell types\ndistant_arches = aa_model.find_distant_archetypes(anchors_df, n=3)"
  },
  {
    "action": "Plot the explained variances (evs) from the Archetypal Analysis model using the `plot_evs` function. This helps to determine the optimal number of archetypes.",
    "code": "plot_utils.plot_evs(evs, kmin=aa_model.kmin)"
  },
  {
    "action": "Visualize the archetypes in a 2D or 3D plot using the `plot_archetypes` function from the `aa_model`. This helps to understand the geometric structure of the data and the identified archetypes.",
    "code": "aa_model.plot_archetypes(do_3d=False, major=True, disp_cluster=False)"
  },
  {
    "action": "Visualize the mapping between archetypes and cell types using the `plot_mapping` function from the `aa_model`. This shows how archetypes correspond to known cell types.",
    "code": "aa_model.plot_mapping(map_df)"
  },
  {
    "action": "Refine the anchor spots and update the signature genes by appending archetypal marker genes with the best-aligned anchors. This step uses the `refine_anchors` function from `utils` and updates the `visium_args` object.",
    "code": "visium_args = utils.refine_anchors(\n    visium_args,\n    aa_model,\n    #thld=0.7,  # alignment threshold\n    n_genes=5,\n    #n_iters=1\n)\n\n# Get updated adata & signatures\nadata, adata_normed = visium_args.get_adata()\ngene_sig = visium_args.gene_sig\ncell_types = gene_sig.columns"
  },
  {
    "action": "Import the torch library. Define parameters for model training, including the number of random restarts (`n_repeats`), number of epochs, patience for early stopping, and the device to use for training (GPU if available, otherwise CPU).",
    "code": "import torch\nn_repeats = 3\nepochs = 200\npatience = 50\ndevice = torch.device('cuda' if torch.cuda.is_available() else 'cpu')"
  },
  {
    "action": "Train the Starfysh model using the `run_starfysh` function from `utils`. This function runs the model training with specified parameters and returns the trained model and the training loss.",
    "code": "# Run models\nmodel, loss = utils.run_starfysh(visium_args,\n                                 n_repeats=n_repeats,\n                                 epochs=epochs,\n                                 #patience=patience,\n                                 device=device\n                                )"
  },
  {
    "action": "Evaluate the trained Starfysh model using the `model_eval` function from `sf_model`. This function parses the model inference outputs and generative outputs, and updates the `adata` object with these results.",
    "code": "adata, adata_normed = visium_args.get_adata()\ninference_outputs, generative_outputs,adata_ = sf_model.model_eval(model,\n                                                            adata,\n                                                            visium_args,\n                                                            poe=False,\n                                                            device=device)"
  },
  {
    "action": "Import the numpy library. Select a random cell type index and use the `gene_mean_vs_inferred_prop` function from `post_analysis` to compare the signature gene means with the inferred proportions for that cell type.",
    "code": "import numpy as np\nn_cell_types = gene_sig.shape[1]\nidx = np.random.randint(0, n_cell_types)\npost_analysis.gene_mean_vs_inferred_prop(inference_outputs,\n                                         visium_args,\n                                         idx=idx,\n                                         figsize=(4,4)\n                                        )"
  },
  {
    "action": "Visualize the inferred feature 'ql_m' on a spatial map using the `pl_spatial_inf_feature` function from `plot_utils`. The plot is colored using the 'Blues' colormap.",
    "code": "plot_utils.pl_spatial_inf_feature(adata_, feature='ql_m', cmap='Blues')"
  },
  {
    "action": "Define a function `cell2proportion` to extract cell type proportions from the `adata_` object and create a new AnnData object (`adata_plot`) for visualization.",
    "code": "def cell2proportion(adata):\n    adata_plot=sc.AnnData(adata.X)\n    adata_plot.obs=utils.extract_feature(adata_, 'qc_m').obs.copy()\n    adata_plot.var=adata.var.copy()\n    adata_plot.obsm=adata.obsm.copy()\n    adata_plot.obsp=adata.obsp.copy()\n    adata_plot.uns=adata.uns.copy()\n    return adata_plot\nadata_plot=cell2proportion(adata_)"
  },
  {
    "action": "Display a summary of the `adata_plot` object, which contains the cell type proportions extracted from `adata_`.",
    "code": "adata_plot"
  },
  {
    "action": "Visualize the inferred cell type proportions for specific cell types ('Basal', 'LumA', 'LumB') on a spatial map using scanpy's `sc.pl.spatial` function. The plot is colored using the 'Spectral_r' colormap and displays values up to the 90th percentile.",
    "code": "sc.pl.spatial(adata_plot, cmap='Spectral_r',\n                  # show first 8 cell types\n                  color=['Basal','LumA','LumB'],\n                  ncols=4, size=1.3,\n                  img_key='hires',\n                  vmin=0, vmax='p90'\n                 )"
  },
  {
    "action": "Visualize the inferred cell type proportions for specific cell types ('Basal', 'LumA', 'MBC', 'Normal epithelial') on a UMAP representation using `ov.pl.embedding`. The plot is colored using the 'Spectral_r' colormap and displays values up to the 90th percentile.",
    "code": "ov.pl.embedding(adata_plot,\n               basis='z_umap',\n                color=['Basal', 'LumA', 'MBC', 'Normal epithelial'],\n               frameon='small',\n                vmin=0, vmax='p90',\n                cmap='Spectral_r',\n               )"
  },
  {
    "action": "Predict cell type-specific gene expression using the `model_ct_exp` function from `sf_model`. This function calculates the predicted expression levels for each cell type based on the trained model.",
    "code": "pred_exprs = sf_model.model_ct_exp(model,\n                                   adata,\n                                   visium_args,\n                                   device=device)"
  },
  {
    "action": "Visualize the predicted expression of the gene 'IL7R' for the cell type 'Tem' on a spatial map using scanpy's `sc.pl.spatial` function. The plot is colored using the 'Spectral_r' colormap and displays the predicted expression values.",
    "code": "gene='IL7R'\ngene_celltype='Tem'\nadata_.layers[f'infer_{gene_celltype}']=pred_exprs[gene_celltype]\n\nsc.pl.spatial(adata_, cmap='Spectral_r',\n                  # show first 8 cell types\n                  color=gene,\n                  title=f'{gene} (Predicted expression)\\n{gene_celltype}',\n                  layer=f'infer_{gene_celltype}',\n                  ncols=4, size=1.3,\n                  img_key='hires',\n                  #vmin=0, vmax='p90'\n                 )"
  },
  {
    "action": "Specify an output directory to save the model and inferred parameters. Create the directory if it does not exist. Save the trained model's state dictionary to a .pt file and write the `adata` object with inferred parameters to a .h5ad file.",
    "code": "# Specify output directory\noutdir = './results/'\nif not os.path.exists(outdir):\n    os.mkdir(outdir)\n\n# save the model\ntorch.save(model.state_dict(), os.path.join(outdir, 'starfysh_model.pt'))\n\n# save `adata` object with inferred parameters\nadata.write(os.path.join(outdir, 'st.h5ad'))"
  },
  {
    "action": "Import the omicverse, scvelo, and scanpy libraries. Set plotting parameters using `ov.plot_set()`.",
    "code": "import omicverse as ov\n#import omicverse.STT as st\nimport scvelo as scv\nimport scanpy as sc\nov.plot_set()"
  },
  {
    "action": "Read the 'mouse_brain.h5ad' file into an AnnData object using `sc.read_h5ad`.",
    "code": "adata = sc.read_h5ad('mouse_brain.h5ad')\nadata"
  },
  {
    "action": "Construct an STT object using the `ov.space.STT` class. Initialize it with the AnnData object, specifying the spatial location key as 'xy_loc' and the region key as 'Region'.",
    "code": "STT_obj=ov.space.STT(adata,spatial_loc='xy_loc',region='Region')"
  },
  {
    "action": "Estimate the stages for the STT model using the `stage_estimate` method.",
    "code": "STT_obj.stage_estimate()"
  },
  {
    "action": "Train the STT model with specified parameters: 9 states, 15 iterations, connectivity weight of 0.5, 50 neighbors, threshold for MS gene of 0.2, and spatial weight of 0.3.",
    "code": "STT_obj.train(n_states = 9, n_iter = 15, weight_connectivities = 0.5, \n            n_neighbors = 50,thresh_ms_gene = 0.2, spa_weight =0.3)"
  },
  {
    "action": "Visualize the 'attractor' attribute on a 2D embedding using the 'xy_loc' basis with `ov.pl.embedding`. The plot is colored by the 'attractor' values and uses a specific color palette.",
    "code": "ov.pl.embedding(adata, basis=\"xy_loc\", \n                color=[\"attractor\"],frameon='small',\n               palette=ov.pl.sc_color[11:])"
  },
  {
    "action": "Visualize the 'Region' attribute on a 2D embedding using the 'xy_loc' basis with `ov.pl.embedding`. The plot is colored by the 'Region' values.",
    "code": "ov.pl.embedding(adata, basis=\"xy_loc\", \n                color=[\"Region\"],frameon='small',\n               )"
  },
  {
    "action": "Prepare a pathway dictionary using the `ov.utils.geneset_prepare` function. The pathway data is loaded from the 'KEGG_2019_Mouse.txt' file, and the organism is specified as 'Mouse'.",
    "code": "pathway_dict=ov.utils.geneset_prepare('genesets/KEGG_2019_Mouse.txt',organism='Mouse')"
  },
  {
    "action": "Compute pathway enrichment for the STT model using the `compute_pathway` method and the prepared pathway dictionary.",
    "code": "STT_obj.compute_pathway(pathway_dict)"
  },
  {
    "action": "Plot the pathway enrichment results using the `plot_pathway` method. The plot is displayed with a specified figure size, marker size, and font size. Axis labels are adjusted for better readability.",
    "code": "fig = STT_obj.plot_pathway(figsize = (10,8),size = 100,fontsize = 12)\nfor ax in fig.axes:\n    ax.set_xlabel('Embedding 1', fontsize=20)  # Adjust font size as needed\n    ax.set_ylabel('Embedding 2', fontsize=20)  # Adjust font size as needed\nfig.show()"
  },
  {
    "action": "Create a subplot and visualize the streamlines for the 'Wnt signaling pathway' using the `plot_tensor_pathway` method. The plot is based on the 'xy_loc' coordinates.",
    "code": "import matplotlib.pyplot as plt\nfig, ax = plt.subplots(1, 1, figsize=(4, 4))\nSTT_obj.plot_tensor_pathway(pathway_name = 'Wnt signaling pathway',basis = 'xy_loc',\n                           ax=ax)"
  },
  {
    "action": "Create a subplot and visualize the streamlines for the 'TGF-beta signaling pathway' using the `plot_tensor_pathway` method. The plot is based on the 'xy_loc' coordinates.",
    "code": "fig, ax = plt.subplots(1, 1, figsize=(4, 4))\nSTT_obj.plot_tensor_pathway( 'TGF-beta signaling pathway',basis = 'xy_loc',\n                           ax=ax)"
  },
  {
    "action": "Plot the tensor for specific attractors [1, 3, 5, 6] using the `plot_tensor` method. The plot filters cells based on a membership threshold and adjusts the density of the visualization.",
    "code": "STT_obj.plot_tensor(list_attractor = [1,3,5,6],\n                filter_cells = True, member_thresh = 0.1, density = 1)"
  },
  {
    "action": "Construct a landscape representation of the STT model using the `construct_landscape` method. The landscape is based on the 'X_xy_loc' coordinate key.",
    "code": "STT_obj.construct_landscape(coord_key = 'X_xy_loc')"
  },
  {
    "action": "Visualize the 'attractor' and 'Region' attributes on a 2D embedding using the 'trans_coord' basis with `sc.pl.embedding`.",
    "code": "sc.pl.embedding(adata, color = ['attractor', 'Region'],basis= 'trans_coord')"
  },
  {
    "action": "Infer the lineage of the STT model using the `infer_lineage` method. The method used is 'MPPT' (most probable path tree), with specified start and end indices, flux fraction, color palette, point size, and text size.",
    "code": "STT_obj.infer_lineage(si=3,sf=4, method = 'MPPT',flux_fraction=0.8,color_palette_name = 'tab10',size_point = 8,\n                   size_text=12)"
  },
  {
    "action": "Plot a Sankey diagram showing the relationship between STT attractors and spatial region annotations using the `plot_sankey` method.",
    "code": "fig = STT_obj.plot_sankey(adata.obs['attractor'].tolist(),adata.obs['Region'].tolist())"
  },
  {
    "action": "Write the `adata` and `adata_aggr` objects to H5AD files. The `adata` object is saved as 'mouse_brain_adata.h5ad', and the `adata_aggr` object is saved as 'mouse_brain_adata_aggr.h5ad'.",
    "code": "STT_obj.adata.write('data/mouse_brain_adata.h5ad')\nSTT_obj.adata_aggr.write('data/mouse_brain_adata_aggr.h5ad')"
  },
  {
    "action": "Read the `adata` and `adata_aggr` objects from the H5AD files 'mouse_brain_adata.h5ad' and 'mouse_brain_adata_aggr.h5ad', respectively.",
    "code": "adata=ov.read('data/mouse_brain_adata.h5ad')\nadata_aggr=ov.read('data/mouse_brain_adata_aggr.h5ad')"
  },
  {
    "action": "Construct an STT object using the `ov.space.STT` class and load the previously saved `adata` and `adata_aggr` objects into it.",
    "code": "STT_obj=ov.space.STT(adata,spatial_loc='xy_loc',region='Region')\nSTT_obj.load(adata,adata_aggr)"
  },
  {
    "action": "Display the 'r2_test' values from the `adata.var` DataFrame, sorted in descending order. These values represent genes with high multistability scores.",
    "code": "adata.var['r2_test'].sort_values(ascending=False)"
  },
  {
    "action": "Plot the top 6 genes with the highest multistability scores using the `plot_top_genes` method. The plot is displayed with 2 columns and a figure size of 8x8.",
    "code": "STT_obj.plot_top_genes(top_genes = 6, ncols = 2, figsize = (8,8),)"
  },
  {
    "action": "Create a 1x4 subplot and visualize the expression of the 'Sim1' gene in different layers ('Ms', 'Mu', 'velo') and the raw expression. Each subplot displays the 'Sim1' expression on the 'xy_loc' basis using the 'RdBu_r' colormap.",
    "code": "import matplotlib.pyplot as plt\nfig, axes = plt.subplots(1, 4, figsize=(12, 3))\nov.pl.embedding(adata, basis=\"xy_loc\", \n                color=[\"Sim1\"],frameon='small',\n                title='Sim1:Ms',show=False,\n                layer='Ms',cmap='RdBu_r',ax=axes[0]\n               )\nov.pl.embedding(adata, basis=\"xy_loc\", \n                color=[\"Sim1\"],frameon='small',\n                title='Sim1:Mu',show=False,\n                layer='Mu',cmap='RdBu_r',ax=axes[1]\n               )\nov.pl.embedding(adata, basis=\"xy_loc\", \n                color=[\"Sim1\"],frameon='small',\n                title='Sim1:Velo',show=False,\n                layer='velo',cmap='RdBu_r',ax=axes[2]\n               )\nov.pl.embedding(adata, basis=\"xy_loc\", \n                color=[\"Sim1\"],frameon='small',\n                title='Sim1:exp',show=False,\n                #layer='Mu',\n                cmap='RdBu_r',ax=axes[3]\n               )\nplt.tight_layout()"
  }
]