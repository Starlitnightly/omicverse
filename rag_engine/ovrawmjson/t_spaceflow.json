[
  {
    "action": "Import necessary libraries: omicverse, scanpy. Set plotting parameters using `ov.utils.ov_plot_set()`.",
    "code": "import omicverse as ov\nimport scanpy as sc\nov.utils.ov_plot_set()"
  },
  {
    "action": "Read 10x Visium spatial transcriptomics data from a specified path and file, and make variable names unique.",
    "code": "adata = sc.read_visium(path='data', count_file='151676_filtered_feature_bc_matrix.h5')\nadata.var_names_make_unique()"
  },
  {
    "action": "Calculate quality control metrics, filter genes with total counts less than 100, identify spatially variable genes using the 'prost' method, and subset the AnnData object to include only spatially variable features.",
    "code": "sc.pp.calculate_qc_metrics(adata, inplace=True)\nadata = adata[:,adata.var['total_counts']>100]\nadata=ov.space.svg(adata,mode='prost',n_svgs=3000,target_sum=1e4,platform=\"visium\",)\nadata.raw = adata\nadata = adata[:, adata.var.space_variable_features]\nadata"
  },
  {
    "action": "Read ground truth annotations from a text file and assign them to the 'Ground Truth' column in the observation metadata of the AnnData object. Visualize the spatial distribution of the ground truth annotations.",
    "code": "import pandas as pd\nimport os\nAnn_df = pd.read_csv(os.path.join('data', '151676_truth.txt'), sep='\t', header=None, index_col=0)\nAnn_df.columns = ['Ground Truth']\nadata.obs['Ground Truth'] = Ann_df.loc[adata.obs_names, 'Ground Truth']\nsc.pl.spatial(adata, img_key=\"hires\", color=[\"Ground Truth\"])"
  },
  {
    "action": "Initialize a SpaceFlow object using the AnnData object.",
    "code": "sf_obj=ov.space.pySpaceFlow(adata)"
  },
  {
    "action": "Train the SpaceFlow model with specified parameters for spatial regularization, embedding dimension, learning rate, epochs, patience, stopping criteria, random seed, GPU usage, and regularization acceleration.",
    "code": "sf_obj.train(spatial_regularization_strength=0.1, \n             z_dim=50, lr=1e-3, epochs=1000, \n             max_patience=50, min_stop=100, \n             random_seed=42, gpu=0, \n             regularization_acceleration=True, edge_subset_sz=1000000)"
  },
  {
    "action": "Calculate the Pseudo-Spatial Map (pSM) using the trained SpaceFlow model with specified parameters for the number of neighbors, resolution, maximum cells for subsampling, and the key to store the pSM results.",
    "code": "sf_obj.cal_pSM(n_neighbors=20,resolution=1,\n                max_cell_for_subsampling=5000,psm_key='pSM_spaceflow')"
  },
  {
    "action": "Visualize the spatial distribution of the calculated pSM and the ground truth annotations.",
    "code": "sc.pl.spatial(adata, color=['pSM_spaceflow','Ground Truth'],cmap='RdBu_r')"
  },
  {
    "action": "Cluster the spatial data using Gaussian Mixture Model (GMM) with specified parameters for the number of components, covariance type, tolerance, maximum iterations, and random state, using the 'spaceflow' representation.",
    "code": "ov.utils.cluster(adata,use_rep='spaceflow',method='GMM',n_components=7,covariance_type='full',\n                      tol=1e-9, max_iter=1000, random_state=3607)"
  },
  {
    "action": "Visualize the spatial distribution of the GMM clusters and the ground truth annotations.",
    "code": "sc.pl.spatial(adata, color=['gmm_cluster',\"Ground Truth\"])"
  }
]